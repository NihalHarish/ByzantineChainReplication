# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test1

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 1
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[1] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,3] = result_shuttle(2,1),change_result()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
failures[0,2] = shuttle(0,1), change_result()

#TEST VALUES
test_dict = {"ports": " gross", "jewel": " accidents", "discipline": " interrelation", "movie": "star wars", "handle": " smile cement"} 

#####################################################################################################################################################
# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test2

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 4 
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = slice('start', '2:10'); append('start', 'cramp'); put('firer', 'amplitude'); slice('firer', '8:0'); append('start', 'jaw'); slice('firer', '4:7'); put('whirls', 'courts'); get('whirls'); slice('whirls', '9:2'); get('firer'); put('meat', 'steamers'); slice('start', '6:5'); append('firer', 'crops'); get('meat'); get('meat'); append('firer', 'commissions'); slice('whirls', '3:5'); get('whirls'); get('firer'); get('whirls')
workload[1] = get('start'); get('start'); get('start'); append('start', 'downgrades'); put('lever', 'hillside'); get('start'); put('shaft', 'neutron'); put('stress', 'sunlight'); get('shaft'); append('shaft', 'validations'); slice('lever', '9:10'); append('shaft', 'midnight'); slice('stress', '0:0'); slice('lever', '7:8'); slice('lever', '5:1'); slice('lever', '8:9'); append('lever', 'checker'); append('lever', 'merchant'); put('skill', 'bed'); get('start')
workload[2] = put('claws', 'polices'); append('start', 'businesses'); get('claws'); get('start'); get('claws'); get('start'); append('claws', 'percentage'); put('coats', 'acts'); get('start'); append('coats', 'coughs'); put('proficiency', 'turnarounds'); append('start', 'fabrication'); append('start', 'till'); slice('coats', '3:8'); append('start', 'brains'); append('start', 'bunches'); slice('coats', '2:8'); append('proficiency', 'points'); put('assembly', 'abbreviations'); slice('start', '2:0')
workload[3] = slice('start', '3:6'); put('watchstanding', 'rules'); slice('watchstanding', '3:8'); append('watchstanding', 'character'); put('capabilities', 'filler'); append('capabilities', 'sidewalk'); append('watchstanding', 'night'); append('start', 'chemicals'); append('watchstanding', 'capacitor'); put('march', 'multiplications'); put('matter', 'kettles'); put('length', 'coordinates'); append('matter', 'breezes'); put('beam', 'holder'); get('length'); slice('capabilities', '8:1'); slice('length', '4:7'); put('blankets', 'calibration'); append('blankets', 'finger'); get('blankets')
#workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
#workload[2] = put('jedi','luke skywalker'); slice('jedi','0:4'); get('jedi')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = forwarded_request(0,2), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
failures[0,3] = shuttle(0,2), drop_result_stmt()
failures[0,1] = result_shuttle(0,1), change_result()


# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {"length": "rdi", "lever": " checker merchant", "proficiency": " turnarounds points", "claws": " polices percentage", "blankets": " calibration finger", "march": " multiplications", "coats": " co", "matter": " kettles breezes", "shaft": " neutron validations midnight", "whirls": "ur", "meat": " steamers", "stress": " sunlight", "firer": "lit crops commissions", "beam": " holder", "watchstanding": "les character night capacitor", "capabilities": " filler sidewalk", "skill": " bed", "assembly": " abbreviations"}

#####################################################################################################################################################

# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test3

# number of failures to tolerate.  number of replicas is 2t+1.
t = 3
# number of clients
num_client = 8
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = slice('start', '4:0'); slice('start', '2:5'); append('start', 'correlation'); slice('start', '3:9'); get('start'); get('start'); slice('start', '1:5'); get('start'); slice('start', '1:2'); get('start') 
workload[1] = append('start', 'rakes'); append('start', 'meanings'); get('start'); put('evaluations', 'nausea'); append('evaluations', 'walk'); slice('evaluations', '3:1'); slice('start', '9:5'); put('shoe', 'moonlight'); get('evaluations'); slice('shoe', '2:0')
workload[2] = append('start', 'exposures'); slice('start', '3:9'); append('start', 'vol.'); append('start', 'dam'); slice('start', '3:4'); get('start'); append('start', 'pitches'); put('gyroscopes', 'point'); slice('start', '1:5'); append('start', 'petition')
workload[3] = append('start', 'pipe'); get('start'); put('punches', 'handful'); put('pick', 'maples'); slice('pick', '4:2'); get('start'); append('start', 'wardroom'); get('punches'); slice('pick', '9:4'); get('start')
workload[4] = get('start'); slice('start', '8:10'); get('start'); put('blocks', 'street'); get('blocks'); put('substance', 'patch'); slice('start', '9:4'); append('start', 'threats'); put('reservists', 'hazard'); slice('start', '9:5')
workload[5] = put('arts', 'milks'); append('start', 'drive'); get('start'); append('arts', 'ending'); put('relocations', 'bump'); put('blueprint', 'guard'); get('blueprint'); append('blueprint', 'cry'); get('start'); slice('relocations', '9:2')
workload[6] = get('start'); append('start', 'taxes'); put('crowns', 'electrons'); get('crowns'); append('crowns', 'grinder'); get('start'); get('start'); append('crowns', 'burns'); append('start', 'parentheses'); put('turn', 'increment')
workload[7] = append('start', 'berths'); slice('start', '5:7'); get('start'); put('memorandum', 'tensions'); get('start'); slice('memorandum', '1:2'); put('implantation', 'airships'); slice('implantation', '6:3'); put('lands', 'torque'); put('windlasses', 'carload')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {"substance": " patch", "memorandum": "t", "relocations": " bump", "pick": " maples", "evaluations": " nausea walk", "blueprint": " guard cry", "reservists": " hazard", "punches": " handful", "lands": " torque", "blocks": " street", "windlasses": " carload", "crowns": " electrons grinder burns", "arts": " milks ending", "shoe": " moonlight", "implantation": " airships", "gyroscopes": " point", "turn": " increment"}
 
 
 
#####################################################################################################################################################
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test4

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 3
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,10)
workload[1] = pseudorandom(212,10)
workload[2] = pseudorandom(256,10)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
#####################################################################################################################################################
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test5

# number of failures to tolerate.  number of replicas is 2t+1.
t = 3
# number of clients
num_client = 5
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,5)
workload[1] = pseudorandom(212,5)
workload[2] = pseudorandom(256,5)
workload[3] = pseudorandom(233,5)
workload[4] = pseudorandom(212,5)
# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

failures[0,0] = result_shuttle(0,1), change_operation()
failures[0,6] = shuttle(2,3), drop_result_stmt()
failures[0,2] = shuttle(0,3), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
 
 
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test6

# number of failures to tolerate.  number of replicas is 2t+1.
t = 1
# number of clients
num_client = 10
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,5)
workload[1] = pseudorandom(212,5)
workload[2] = pseudorandom(256,5)
workload[3] = pseudorandom(233,5)
workload[4] = pseudorandom(212,5)
workload[5] = pseudorandom(233,5)
workload[6] = pseudorandom(212,5)
workload[7] = pseudorandom(356,5)
workload[8] = pseudorandom(456,5)
workload[9] = pseudorandom(556,5)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
failures[0,2] = shuttle(6,3), change_result()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
 
 
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = stresstest

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 10
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(203,100) 
workload[1] = pseudorandom(213,100)
workload[2] = pseudorandom(223,100)
workload[3] = pseudorandom(233,100)
workload[4] = pseudorandom(243,100)
workload[5] = pseudorandom(253,100) 
workload[6] = pseudorandom(263,100)
workload[7] = pseudorandom(273,100)
workload[8] = pseudorandom(283,100)
workload[9] = pseudorandom(293,100)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}















 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = stresstest2

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 10
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = append('start', 'characteristic'); slice('start', '3:9'); append('start', 'sill'); append('start', 'projectile'); slice('start', '3:4'); get('start'); append('start', 'superintendent'); put('programmers', 'swab'); slice('start', '1:5'); append('start', 'submissions'); append('start', 'operands'); get('programmers'); put('bends', 'pound'); get('programmers'); append('start', 'header'); append('programmers', 'authorization'); append('bends', 'army'); append('bends', 'punch'); get('start'); put('pedal', 'stretchers'); append('start', 'shaves'); append('pedal', 'polls'); slice('bends', '8:1'); append('start', 'friday'); get('bends'); put('characteristics', 'retailers'); put('spoke', 'analysts'); get('programmers'); append('characteristics', 'checkers'); slice('spoke', '7:1'); put('servos', 'bench'); slice('servos', '6:4'); put('cakes', 'democracies'); append('bends', 'overcurrents'); get('bends'); append('servos', 'numeral'); slice('bends', '6:10'); slice('pedal', '8:0'); put('videos', 'drainage'); append('bends', 'moons'); get('videos'); append('videos', 'realinement'); put('abrasive', 'handles'); append('servos', 'vices'); append('spoke', 'ear'); slice('bends', '4:10'); append('videos', 'positions'); put('exhaust', 'candidate'); append('characteristics', 'nights'); put('abbreviation', 'serial'); slice('bends', '4:4'); slice('programmers', '0:1'); slice('characteristics', '2:4'); append('servos', 'screw'); slice('abbreviation', '2:7'); slice('start', '10:6'); get('exhaust'); slice('videos', '3:7'); append('servos', 'method'); slice('abrasive', '5:9'); slice('videos', '7:3'); put('brick', 'birth'); put('wiggles', 'swallow'); put('presses', 'content'); get('pedal'); slice('bends', '1:4'); put('purchaser', 'round'); get('brick'); append('purchaser', 'roll'); append('abrasive', 'conveniences'); get('servos'); append('abrasive', 'cheater'); put('folder', 'transits'); put('structure', 'jumps'); append('spoke', 'hospital'); append('abrasive', 'huts'); slice('exhaust', '2:3'); get('servos'); slice('videos', '8:6'); get('abrasive'); put('items', 'blink'); append('abbreviation', 'aptitudes'); get('bends'); slice('bends', '3:3'); get('brick'); get('abrasive'); append('abrasive', 'mat'); put('calendars', 'bet'); put('segments', 'hose'); append('bends', 'times'); slice('folder', '2:8'); append('cakes', 'habits'); get('videos'); get('segments'); slice('spoke', '5:10'); get('presses'); put('cycle', 'pace'); slice('calendars', '9:3'); slice('purchaser', '1:1'); slice('structure', '1:2') 
workload[1] = append('start', 'nod'); append('start', 'okays'); get('start'); put('caves', 'humor'); append('caves', 'implement'); slice('caves', '3:1'); slice('start', '9:5'); put('runner', 'legends'); get('caves'); slice('runner', '2:0'); put('couplings', 'juries'); get('runner'); slice('caves', '0:7'); get('start'); get('start'); get('start'); slice('couplings', '0:1'); get('couplings'); slice('runner', '4:9'); append('couplings', 'sevens'); append('couplings', 'percentage'); append('start', 'servants'); get('couplings'); append('runner', 'welder'); get('caves'); append('start', 'rice'); put('paygrade', 'coder'); slice('paygrade', '4:3'); get('start'); get('runner'); append('couplings', 'deficiencies'); slice('couplings', '10:3'); get('start'); slice('paygrade', '4:6'); slice('caves', '1:1'); put('hotels', 'beliefs'); slice('caves', '9:6'); slice('paygrade', '2:0'); append('paygrade', 'trims'); get('start'); slice('paygrade', '3:4'); append('runner', 'dollar'); put('wrists', 'ices'); append('wrists', 'accounts'); slice('runner', '9:10'); get('wrists'); slice('start', '10:7'); get('wrists'); get('runner'); get('runner'); get('couplings'); get('paygrade'); get('couplings'); put('examination', 'schooling'); put('sale', 'failure'); put('dittos', 'straps'); put('toes', 'indications'); slice('runner', '0:4'); get('hotels'); append('paygrade', 'ensign'); slice('start', '0:7'); append('start', 'okays'); get('toes'); slice('dittos', '4:10'); append('toes', 'shelters'); put('flash', 'cubes'); put('slope', 'song'); slice('sale', '6:6'); put('port', 'ideal'); put('houses', 'fishes'); get('paygrade'); get('wrists'); get('caves'); append('couplings', 'fathoms'); put('tube', 'hashmark'); get('couplings'); get('slope'); put('towels', 'residues'); slice('start', '9:6'); get('slope'); append('caves', 'knot'); append('houses', 'crusts'); append('towels', 'sprayer'); put('bite', 'observer'); slice('paygrade', '8:4'); slice('towels', '1:5'); get('caves'); put('certificate', 'resources'); put('thyristor', 'bowl'); put('projects', 'dials'); get('sale'); slice('wrists', '6:4'); get('houses'); put('indexes', 'bypass'); get('slope'); append('slope', 'integers'); append('tube', 'organs'); put('september', 'coating'); get('flash'); slice('dittos', '8:1')
workload[2] = get('start'); slice('start', '8:10'); get('start'); put('sack', 'ampere'); get('sack'); put('appropriation', 'straightener'); slice('start', '9:4'); append('start', 'exteriors'); put('fire', 'paints'); slice('start', '9:5'); put('portions', 'barometer'); slice('sack', '5:4'); get('fire'); put('partner', 'duty'); put('subprogram', 'coder'); append('partner', 'month'); append('sack', 'tactics'); slice('fire', '2:0'); append('portions', 'milestones'); append('appropriation', 'glands'); slice('subprogram', '2:10'); put('error', 'shout'); append('sack', 'pit'); get('subprogram'); append('appropriation', 'carelessness'); get('appropriation'); slice('error', '1:6'); get('fire'); slice('appropriation', '0:8'); get('sack'); slice('error', '0:0'); get('fire'); put('feelings', 'diagonals'); append('appropriation', 'lights'); get('partner'); put('instance', 'ammunition'); append('sack', 'journals'); slice('error', '1:4'); slice('start', '10:3'); put('reenlistment', 'coal'); get('partner'); put('investments', 'ceiling'); append('subprogram', 'armaments'); put('requirement', 'graphs'); append('investments', 'compressions'); append('subprogram', 'tear'); get('feelings'); slice('appropriation', '10:6'); append('feelings', 'slinging'); get('error'); append('sack', 'disability'); get('portions'); put('quantities', 'bows'); put('inlets', 'terrains'); put('installation', 'processors'); get('investments'); get('investments'); slice('appropriation', '8:7'); get('investments'); put('starts', 'beacons'); get('start'); get('start'); slice('requirement', '9:9'); slice('appropriation', '8:6'); slice('installation', '7:10'); slice('feelings', '9:10'); put('self', 'session'); append('inlets', 'movements'); get('requirement'); put('explosives', 'signalers'); put('garages', 'replenishments'); put('majority', 'flame'); append('appropriation', 'perfect'); append('start', 'shirts'); append('feelings', 'fats'); append('explosives', 'drawers'); get('quantities'); append('requirement', 'bracket'); slice('portions', '3:8'); get('reenlistment'); append('error', 'punishment'); slice('start', '0:8'); append('majority', 'claws'); append('feelings', 'compromises'); get('quantities'); append('garages', 'flashes'); get('installation'); put('copies', 'matter'); append('starts', 'chock'); get('garages'); append('majority', 'patrol'); slice('installation', '2:7'); get('starts'); put('motion', 'tunes'); slice('starts', '9:0'); append('error', 'eligibility'); append('sack', 'sprayers'); slice('partner', '1:6'); append('start', 'allowance'); put('striker', 'classifications')
workload[3] = put('threader', 'overtime'); append('start', 'mover'); get('start'); append('threader', 'chatter'); put('fees', 'sentence'); put('sailor', 'probes'); get('sailor'); append('sailor', 'dispatcher'); get('start'); slice('fees', '9:2'); put('salvage', 'bar'); append('sailor', 'mouths'); get('start'); slice('fees', '10:6'); get('start'); append('start', 'highlines'); append('start', 'fan'); put('tide', 'bubbles'); get('fees'); slice('tide', '8:1'); append('sailor', 'completion'); put('folds', 'observation'); put('lots', 'acceptances'); get('tide'); append('start', 'communications'); slice('salvage', '2:7'); put('reconfigurations', 'selector'); put('operands', 'faults'); slice('threader', '2:1'); append('reconfigurations', 'hairpins'); put('trap', 'procedure'); put('hyphens', 'sister'); put('bangs', 'evaluations'); put('regulations', 'takeoffs'); append('salvage', 'excuse'); append('regulations', 'pressures'); put('bytes', 'february'); slice('hyphens', '1:6'); put('fighter', 'tabulation'); get('trap'); put('blots', 'takeoff'); append('folds', 'entry'); put('stocking', 'riddle'); put('sidewalks', 'obligation'); append('start', 'payroll'); put('facts', 'energizer'); get('bangs'); slice('sailor', '1:0'); slice('threader', '9:0'); slice('hyphens', '4:7'); get('stocking'); append('tide', 'evaluations'); get('sailor'); put('plead', 'apostrophe'); append('trap', 'vapor'); get('salvage'); slice('hyphens', '3:9'); slice('start', '6:2'); get('reconfigurations'); put('wrench', 'differences'); slice('threader', '7:1'); get('reconfigurations'); slice('tide', '0:8'); slice('reconfigurations', '4:7'); slice('lots', '9:1'); get('trap'); get('fees'); append('salvage', 'verb'); append('regulations', 'standardization'); append('hyphens', 'rushes'); append('blots', 'cone'); append('reconfigurations', 'thing'); append('wrench', 'lands'); put('jacket', 'coughs'); append('threader', 'inquiries'); get('plead'); append('fees', 'magnitude'); append('tide', 'cable'); put('foreground', 'casts'); append('reconfigurations', 'contents'); slice('regulations', '5:9'); append('lots', 'puffs'); put('buoy', 'doorknobs'); append('buoy', 'journals'); slice('foreground', '5:2'); put('prices', 'effectiveness'); append('bytes', 'catch'); append('bytes', 'rest'); slice('tide', '4:2'); slice('fees', '8:1'); put('initiator', 'talk'); put('tent', 'violet'); append('regulations', 'incentives'); slice('sidewalks', '1:5'); get('salvage'); put('shave', 'riddles'); put('yarns', 'market'); put('tracker', 'temperatures'); slice('initiator', '0:9'); append('lots', 'ladder')
workload[4] = slice('start', '2:10'); append('start', 'force'); put('distributor', 'signalers'); slice('distributor', '8:0'); append('start', 'gear'); slice('distributor', '4:7'); put('lack', 'fogs'); get('lack'); slice('lack', '9:2'); get('distributor'); put('stems', 'bather'); slice('start', '6:5'); append('distributor', 'formula'); get('stems'); get('stems'); append('distributor', 'qualification'); slice('lack', '3:5'); get('lack'); get('distributor'); get('lack'); slice('distributor', '1:0'); put('extension', 'initiators'); put('pleads', 'altitudes'); put('instance', 'counters'); append('stems', 'carburetor'); get('extension'); slice('start', '6:6'); get('stems'); slice('lack', '7:0'); get('extension'); append('stems', 'parentheses'); slice('distributor', '8:10'); get('extension'); append('stems', 'gunfire'); get('stems'); put('heap', 'run'); put('batch', 'chairmen'); append('start', 'guess'); append('pleads', 'torpedo'); put('fountain', 'today'); slice('fountain', '0:4'); append('instance', 'cylinders'); get('pleads'); put('waters', 'presentations'); append('waters', 'pushdowns'); slice('extension', '0:1'); append('fountain', 'sock'); slice('batch', '9:1'); slice('pleads', '8:10'); put('infection', 'spill'); put('edge', 'shifts'); slice('edge', '3:4'); slice('instance', '9:9'); append('infection', 'bulkheads'); append('infection', 'shares'); put('submission', 'presidents'); put('splints', 'insertions'); get('heap'); get('distributor'); put('baseline', 'elbow'); slice('batch', '1:9'); slice('baseline', '3:5'); slice('baseline', '1:8'); slice('edge', '6:10'); get('stems'); put('kilometer', 'voids'); append('splints', 'drainers'); put('chain', 'pressures'); get('chain'); get('waters'); get('baseline'); get('start'); slice('submission', '7:5'); put('handful', 'tasks'); put('schoolrooms', 'canyons'); get('distributor'); get('submission'); slice('heap', '4:9'); get('extension'); get('handful'); slice('infection', '10:7'); slice('submission', '7:0'); slice('heap', '10:1'); append('infection', 'sack'); put('bite', 'bypasses'); put('entry', 'sheet'); slice('batch', '9:10'); slice('edge', '3:9'); append('lack', 'silence'); slice('instance', '2:8'); put('humans', 'step'); put('sleep', 'series'); slice('entry', '5:4'); slice('pleads', '7:9'); get('fountain'); append('extension', 'lent'); append('lack', 'overalls'); get('edge'); get('pleads'); append('instance', 'nulls')
workload[5] = slice('start', '4:0'); slice('start', '2:5'); append('start', 'diagonals'); slice('start', '3:9'); get('start'); get('start'); slice('start', '1:5'); get('start'); slice('start', '1:2'); get('start'); put('influences', 'shower'); append('influences', 'truth'); append('start', 'scratchpad'); append('start', 'forehead'); get('start'); get('influences'); put('civilians', 'geography'); append('start', 'interviewers'); slice('influences', '10:10'); slice('civilians', '0:4'); slice('start', '2:8'); put('woman', 'tops'); get('start'); get('influences'); put('dials', 'skills'); get('start'); get('influences'); put('bottles', 'gross'); get('bottles'); get('civilians'); append('start', 'participation'); put('utilization', 'residues'); put('ending', 'guy'); put('cages', 'investment'); append('cages', 'garages'); get('ending'); append('influences', 'milk'); put('seam', 'meat'); slice('seam', '1:5'); append('seam', 'screams'); put('seawater', 'tie'); append('dials', 'gallows'); append('seam', 'qualifications'); append('cages', 'highlines'); put('servant', 'vacuum'); get('servant'); put('generation', 'course'); put('mud', 'step'); slice('ending', '4:5'); append('mud', 'puff'); append('dials', 'jig'); get('mud'); slice('civilians', '10:5'); slice('ending', '8:4'); get('start'); get('woman'); put('challenges', 'dish'); slice('servant', '9:6'); get('utilization'); append('mud', 'discrepancies'); get('dials'); append('challenges', 'honk'); slice('utilization', '2:10'); get('dials'); get('utilization'); put('bypass', 'stream'); append('mud', 'disposal'); put('scream', 'cores'); get('seawater'); slice('influences', '5:1'); slice('ending', '5:0'); put('contention', 'countermeasure'); get('bottles'); put('armaments', 'prisoners'); get('bypass'); get('ending'); get('bottles'); get('civilians'); put('employee', 'note'); append('generation', 'puddles'); append('dials', 'distribution'); append('scream', 'count'); put('laundry', 'floods'); put('project', 'maximums'); append('project', 'adjustments'); put('stretcher', 'swallows'); put('programmer', 'probes'); append('utilization', 'props'); append('servant', 'hunts'); append('seawater', 'sneezes'); slice('influences', '9:7'); put('challenges', 'cloudiness'); put('cushion', 'timers'); put('apprenticeship', 'customs'); put('storage', 'universe'); append('challenges', 'interactions'); append('woman', 'selectors'); get('laundry'); put('conduct', 'sunrise'); put('lifeboats', 'vol.')
workload[6] = append('start', 'sun'); get('start'); put('hangar', 'loops'); put('subsystems', 'oars'); slice('subsystems', '4:2'); get('start'); append('start', 'improvements'); get('hangar'); slice('subsystems', '9:4'); get('start'); slice('start', '7:4'); append('hangar', 'drunks'); slice('subsystems', '3:8'); slice('hangar', '2:9'); put('sevens', 'inlets'); get('sevens'); get('start'); append('sevens', 'reviews'); put('hunts', 'sight'); append('start', 'polishers'); append('sevens', 'parcel'); append('subsystems', 'river'); put('guests', 'practices'); slice('subsystems', '2:9'); get('guests'); put('regulations', 'hyphen'); slice('guests', '0:4'); get('sevens'); append('subsystems', 'apostrophe'); put('gases', 'car'); put('community', 'purchaser'); put('count', 'ceremonies'); get('hangar'); get('community'); slice('guests', '7:0'); put('loaves', 'chiefs'); put('interactions', 'safeguards'); append('start', 'carts'); slice('regulations', '0:1'); put('instance', 'war'); get('loaves'); get('hangar'); get('regulations'); put('reports', 'radiator'); get('hunts'); slice('subsystems', '2:10'); slice('count', '5:1'); put('ages', 'barge'); slice('loaves', '4:4'); slice('start', '1:1'); put('technique', 'nets'); append('count', 'court'); put('nerve', 'diagnosis'); put('escorts', 'appeals'); slice('hunts', '7:7'); put('direction', 'beams'); get('sevens'); append('interactions', 'cents'); put('moments', 'rejection'); put('dependents', 'handwriting'); slice('regulations', '6:10'); append('direction', 'specialization'); slice('dependents', '10:3'); get('hunts'); append('guests', 'hierarchy'); append('technique', 'railways'); slice('reports', '7:5'); append('subsystems', 'calculations'); append('nerve', 'worlds'); slice('ages', '4:0'); get('nerve'); put('runaway', 'perfect'); append('nerve', 'incomes'); get('escorts'); slice('ages', '6:6'); get('hangar'); slice('moments', '6:1'); get('runaway'); get('loaves'); get('direction'); slice('escorts', '3:2'); put('platters', 'terminals'); slice('moments', '8:1'); get('technique'); put('allocations', 'pound'); get('hunts'); slice('technique', '5:6'); slice('runaway', '8:1'); put('bin', 'interrelation'); put('scabs', 'ivory'); put('insanities', 'explosions'); slice('subsystems', '0:5'); get('dependents'); get('nerve'); slice('platters', '10:4'); get('ages'); append('sevens', 'lee'); slice('nerve', '6:6'); get('reports'); slice('moments', '0:0')
workload[7] =  slice('start', '3:8'); slice('start', '7:5'); append('start', 'indicate'); slice('start', '10:0'); put('lines', 'superstructure'); append('lines', 'destinations'); get('lines'); append('lines', 'pushup'); append('start', 'shovels'); append('start', 'flights'); put('alibis', 'integers'); slice('start', '4:2'); get('lines'); put('curvatures', 'challenges'); get('start'); get('start'); get('curvatures'); append('alibis', 'bars'); put('shift', 'nineties'); append('lines', 'purges'); get('start'); put('disability', 'hazard'); append('lines', 'valves'); put('runaways', 'wiggles'); put('rope', 'ball'); put('waxes', 'fashion'); slice('waxes', '4:8'); get('shift'); slice('alibis', '3:0'); append('alibis', 'shore'); append('curvatures', 'method'); put('swabs', 'regulation'); append('start', 'painter'); put('seed', 'pulls'); put('displacement', 'foreheads'); slice('waxes', '8:4'); append('runaways', 'tablespoon'); append('runaways', 'explosives'); put('panel', 'medal'); append('panel', 'return'); get('shift'); put('aprons', 'facts'); put('fort', 'influences'); append('aprons', 'prisms'); put('vendors', 'confusion'); put('conn', 'label'); put('sacks', 'peck'); slice('curvatures', '3:0'); get('aprons'); put('furnace', 'limitation'); get('waxes'); append('furnace', 'drydock'); append('furnace', 'generation'); append('shift', 'significance'); append('panel', 'administrator'); put('cracks', 'ovens'); get('start'); get('swabs'); put('safety', 'cans'); get('swabs'); append('alibis', 'stretcher'); get('cracks'); put('coxswains', 'method'); get('safety'); put('mondays', 'wafers'); get('curvatures'); get('lines'); put('divider', 'comforts'); get('curvatures'); append('displacement', 'employees'); append('disability', 'flow'); append('lines', 'pay'); get('rope'); put('zero', 'bristle'); get('displacement'); slice('vendors', '7:5'); append('vendors', 'heart'); append('lines', 'balances'); slice('lines', '8:0'); slice('divider', '7:10'); put('harpoons', 'tank'); get('panel'); append('vendors', 'fork'); slice('conn', '1:10'); append('waxes', 'sterilizer'); append('disability', 'apprehension'); get('lines'); put('ordnance', 'rowers'); append('disability', 'refund'); append('waxes', 'accuracy'); slice('fort', '9:1'); slice('swabs', '9:5'); slice('panel', '5:10'); append('seed', 'engineers'); get('curvatures'); put('calculator', 'seat'); append('divider', 'merchant'); slice('zero', '2:0'); slice('vendors', '7:10'); put('hum', 'registers')
workload[8] = get('start'); append('start', 'entry'); put('diseases', 'capacitance'); get('diseases'); append('diseases', 'principles'); get('start'); get('start'); append('diseases', 'services'); append('start', 'steps'); put('recommendations', 'drillers'); slice('start', '10:1'); slice('diseases', '6:0'); put('mattress', 'height'); get('diseases'); slice('mattress', '3:10'); put('convulsion', 'firings'); slice('recommendations', '5:4'); append('recommendations', 'performances'); put('bulkheads', 'hems'); get('recommendations'); append('mattress', 'hoists'); put('wedding', 'detail'); append('mattress', 'scraps'); append('wedding', 'individuals'); get('mattress'); slice('recommendations', '8:10'); get('recommendations'); append('recommendations', 'solutions'); append('mattress', 'zip'); get('bulkheads'); append('diseases', 'ribs'); slice('start', '2:0'); append('recommendations', 'ceremonies'); put('items', 'splitter'); get('recommendations'); put('submarine', 'diameter'); append('start', 'opposites'); put('mules', 'fabrication'); get('convulsion'); append('bulkheads', 'tracker'); slice('mattress', '10:10'); get('diseases'); put('conjectures', 'poke'); slice('conjectures', '6:7'); append('convulsion', 'mover'); append('diseases', 'masses'); slice('start', '1:6'); append('wedding', 'carload'); put('show', 'countermeasure'); put('spark', 'execution'); slice('bulkheads', '2:7'); append('start', 'effort'); append('start', 'regions'); get('convulsion'); append('mattress', 'time'); append('conjectures', 'curvatures'); put('neutron', 'sirs'); get('neutron'); append('start', 'tunnels'); slice('show', '1:6'); get('convulsion'); append('show', 'ending'); put('hotel', 'accusation'); put('surveillance', 'laps'); put('maximums', 'pascal'); append('show', 'carrier'); append('show', 'basements'); slice('surveillance', '0:4'); put('stories', 'sailor'); append('recommendations', 'buoy'); get('conjectures'); append('mattress', 'island'); get('items'); slice('spark', '10:6'); append('wedding', 'aggravation'); get('surveillance'); slice('show', '7:4'); append('mules', 'members'); slice('show', '4:1'); slice('submarine', '7:2'); slice('items', '5:6'); get('submarine'); append('recommendations', 'audit'); get('mattress'); get('conjectures'); put('leaper', 'removals'); append('stories', 'radiator'); append('hotel', 'workloads'); get('diseases'); put('forest', 'rumble'); get('maximums'); get('leaper'); append('forest', 'schooling'); put('loudspeaker', 'jeopardy'); slice('surveillance', '5:3'); slice('convulsion', '4:8'); append('neutron', 'flags'); get('conjectures'); append('mattress', 'nines'); get('loudspeaker')
workload[9] = get('start'); slice('start', '2:4'); put('schoolhouses', 'trials'); get('start'); put('accomplishments', 'conducts'); append('accomplishments', 'logs'); put('reenlistment', 'subfunction'); put('harpoons', 'weld'); put('smokes', 'firearms'); slice('start', '2:2'); put('item', 'threader'); get('smokes'); slice('reenlistment', '8:4'); get('schoolhouses'); get('start'); append('harpoons', 'medal'); put('organization', 'company'); put('cares', 'ribbon'); slice('smokes', '4:4'); get('smokes'); slice('smokes', '1:5'); get('smokes'); append('item', 'wires'); append('item', 'trials'); append('schoolhouses', 'bond'); get('item'); put('girl', 'contract'); put('adherence', 'combinations'); put('approach', 'oscillations'); slice('organization', '4:6'); put('cables', 'caliber'); get('approach'); slice('girl', '5:3'); put('porter', 'miles'); get('cares'); append('smokes', 'handles'); get('adherence'); get('cables'); put('match', 'detection'); get('cares'); put('averages', 'files'); get('cables'); put('driller', 'winch'); put('acre', 'abrasives'); slice('adherence', '6:1'); get('schoolhouses'); get('reenlistment'); append('averages', 'condition'); slice('girl', '6:7'); put('railroad', 'solenoids'); slice('girl', '4:1'); append('match', 'rowers'); append('girl', 'headers'); put('master', 'specialists'); append('girl', 'speeches'); slice('item', '8:5'); slice('cares', '0:2'); get('driller'); slice('porter', '1:3'); append('girl', 'contribution'); put('visitor', 'attorneys'); get('organization'); put('initials', 'electrodes'); put('commitment', 'prop'); put('grams', 'margins'); slice('cares', '5:10'); get('visitor'); get('organization'); put('multitask', 'deflectors'); append('cares', 'moistures'); get('commitment'); append('organization', 'cages'); get('averages'); append('porter', 'multiplication'); put('tens', 'cell'); get('visitor'); append('tens', 'closures'); put('stamps', 'choice'); get('acre'); append('multitask', 'alarm'); append('reenlistment', 'alcoholic'); put('documentation', 'trains'); slice('accomplishments', '0:2'); put('trips', 'section'); slice('master', '6:0'); put('balloon', 'needs'); get('approach'); slice('stamps', '8:6'); put('operabilities', 'jeopardy'); slice('balloon', '3:9'); append('reenlistment', 'ceremony'); slice('operabilities', '1:10'); get('balloon'); get('acre'); append('adherence', 'disadvantage'); slice('trips', '1:1'); get('averages'); slice('harpoons', '7:4'); slice('organization', '2:5'); slice('girl', '10:8')

test_dict = {"fire": " paints", "bangs": " evaluations", "match": " detection rowers", "neutron": " sirs flags", "subsystems": "iver ", "guests": " pra hierarchy", "programmer": " probes", "folder": "ransit", "baseline": "o", "videos": "aina", "sacks": " peck", "ages": " barge", "portions": "romet", "tent": " violet", "apprenticeship": " customs", "harpoons": " tank", "nerve": " diagnosis worlds incomes", "buoy": " doorknobs journals", "girl": "a headers speeches contribution", "gases": " car", "diseases": " capacitance principles services ribs masses", "majority": " flame claws patrol", "blots": " takeoff cone", "cracks": " ovens", "bulkheads": "ems t", "direction": " beams specialization", "hangar": "oops dr", "quantities": " bows", "projects": " dials", "rope": " ball", "wrists": " ices accounts", "allocations": " pound", "insanities": " explosions", "ending": "", "reenlistment": " coal alcoholic ceremony", "programmers": " ", "characteristics": "et", "schoolrooms": " canyons", "show": "count ending carrier basements", "schoolhouses": " trials bond", "servos": " bench numeral vices screw method", "brick": " birth", "curvatures": " challenges method", "extension": "  lent", "yarns": " market", "trips": " section", "explosives": " signalers drawers", "conjectures": " curvatures", "safety": " cans", "paygrade": "t ensign", "railroad": " solenoids", "houses": " fishes crusts", "fort": " influences", "driller": " winch", "adherence": " combinations disadvantage", "seam": "meat screams qualifications", "documentation": " trains", "facts": " energizer", "kilometer": " voids", "couplings": "  sevens percentage deficiencies fathoms", "mules": " fabrication members", "approach": " oscillations", "seawater": " tie sneezes", "entry": " sheet", "laundry": " floods", "technique": " ", "copies": " matter", "visitor": " attorneys", "cages": " investment garages highlines", "wrench": " differences lands", "initials": " electrodes", "batch": "", "error": "hou punishment eligibility", "employee": " note", "cables": " caliber", "bends": "moo times", "hunts": " sight", "loaves": " chiefs", "conduct": " sunrise", "installation": "r", "dependents": " handwriting", "examination": " schooling", "bin": " interrelation", "bite": " bypasses", "edge": "", "operabilities": "jeopardy", "toes": " indications shelters", "requirement": " graphs bracket", "appropriation": " straigh lights perfect", "runner": "e", "feelings": "s fats compromises", "furnace": " limitation drydock generation", "displacement": " foreheads employees", "scabs": " ivory", "spoke": "ysts ", "bytes": " february catch rest", "tube": " hashmark organs", "mud": " step puff discrepancies disposal", "count": " ceremonies court", "storage": " universe", "coxswains": " method", "stories": " sailor radiator", "woman": " tops selectors", "flash": " cubes", "regulations": "dard incentives", "salvage": "ar excuse verb", "recommendations": "s  solutions ceremonies buoy audit", "shave": " riddles", "sailor": " probes dispatcher mouths completion", "averages": " files condition", "sidewalks": "obli", "sleep": " series", "forest": " rumble schooling", "moments": " rejection", "bypass": " stream", "reconfigurations": "ect thing contents", "slope": " song integers", "community": " purchaser", "escorts": " appeals", "item": " threader wires trials", "maximums": " pascal", "segments": " hose", "lines": " superstructure destinations pushup purges valves pay balances", "jacket": " coughs", "grams": " margins", "dittos": "aps", "tens": " cell closures", "september": " coating", "waters": " presentations pushdowns", "items": "k", "partner": "duty ", "waxes": "hion sterilizer accuracy", "striker": " classifications", "seed": " pulls engineers", "mondays": " wafers", "balloon": "eds", "leaper": " removals", "tracker": " temperatures", "hum": " registers", "exhaust": "a", "garages": " replenishments flashes", "prices": " effectiveness", "lifeboats": " vol.", "panel": "l ret", "divider": "ts merchant", "tide": " bubbles cable", "submarine": " diameter", "lack": "gs silence overalls", "subprogram": "oder armaments tear", "servant": " vacuum hunts", "calendars": " bet", "disability": " hazard flow apprehension refund", "fees": " sentence magnitude", "sack": " ampere tactics pit journals disability sprayers", "sevens": " inlets reviews parcel lee", "cushion": " timers", "abrasive": "les conveniences cheater huts mat", "thyristor": " bowl", "heap": "", "plead": " apostrophe", "acre": " abrasives", "initiator": " talk", "foreground": " casts", "armaments": " prisoners", "towels": "resi", "stems": " bather carburetor parentheses gunfire", "project": " maximums adjustments", "hyphens": " rushes", "platters": " terminals", "scream": " cores count", "starts": " beacons chock", "pleads": "", "cycle": " pace", "alibis": " integers bars shore stretcher", "distributor": "ul", "motion": " tunes", "hotel": " accusation workloads", "vendors": "ion", "wiggles": " swallow", "runaway": " perfect", "surveillance": " lap", "fighter": " tabulation", "aprons": " facts prisms", "stocking": " riddle", "hotels": " beliefs", "caves": " humor  knot", "handful": " tasks", "multitask": " deflectors alarm", "contention": " countermeasure", "structure": "j", "threader": " overtime chatter inquiries", "infection": " spill bulkheads shares sack", "cares": " moistures", "utilization": "esidues props", "master": " specialists", "purchaser": " round roll", "calculator": " seat", "splints": " insertions drainers", "inlets": " terrains movements", "loudspeaker": " jeopardy", "reports": " radiator", "trap": " procedure vapor", "runaways": " wiggles tablespoon explosives", "bottles": " gross", "chain": " pressures", "generation": " course puddles", "convulsion": "ings", "investments": " ceiling compressions", "mattress": "ight hoists scraps zip time island nines", "folds": " observation entry", "self": " session", "smokes": "fire handles", "organization": " ca", "submission": " presidents", "ordnance": " rowers", "humans": " step", "civilians": " geo", "port": " ideal", "interactions": " safeguards cents", "pedal": " stretchers polls", "presses": " content", "influences": " shower truth milk", "spark": " execution", "cakes": " democracies habits", "stamps": " choice", "dials": " skills gallows jig distribution", "commitment": " prop", "conn": "label", "lots": " acceptances puffs ladder", "zero": " bristle", "certificate": " resources", "fountain": " tod sock", "challenges": " cloudiness interactions", "swabs": " regulation", "instance": "ar cyl nulls", "sale": " failure", "wedding": " detail individuals carload aggravation", "abbreviation": "erial aptitudes", "operands": " faults", "porter": "mi multiplication", "shift": " nineties significance", "indexes": " bypass", "accomplishments": " c", "stretcher": " swallows"}

