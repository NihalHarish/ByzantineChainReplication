# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test1

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 3
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = append('start', 'collection'); append('start', 'frosts'); get('start'); put('handle', 'smile'); append('handle', 'cement'); slice('handle', '3:1'); slice('start', '9:5'); put('discipline', 'interrelation'); get('handle'); slice('discipline', '2:0')
workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
workload[2] = get('start'); get('start'); slice('start', '8:6'); get('start'); append('start', 'meetings'); put('ports', 'gross'); put('jewel', 'accidents'); slice('start', '6:9'); get('jewel'); slice('start', '0:9')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = forwarded_request(0,2), drop_result_stmt()
failures[0,3] = result_shuttle(2,1),change_result()
# failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {"ports": " gross", "jewel": " accidents", "discipline": " interrelation", "movie": "star wars", "handle": " smile cement"} 

#####################################################################################################################################################
# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test2

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 4 
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = slice('start', '2:10'); append('start', 'cramp'); put('firer', 'amplitude'); slice('firer', '8:0'); append('start', 'jaw'); slice('firer', '4:7'); put('whirls', 'courts'); get('whirls'); slice('whirls', '9:2'); get('firer'); put('meat', 'steamers'); slice('start', '6:5'); append('firer', 'crops'); get('meat'); get('meat'); append('firer', 'commissions'); slice('whirls', '3:5'); get('whirls'); get('firer'); get('whirls')
workload[1] = get('start'); get('start'); get('start'); append('start', 'downgrades'); put('lever', 'hillside'); get('start'); put('shaft', 'neutron'); put('stress', 'sunlight'); get('shaft'); append('shaft', 'validations'); slice('lever', '9:10'); append('shaft', 'midnight'); slice('stress', '0:0'); slice('lever', '7:8'); slice('lever', '5:1'); slice('lever', '8:9'); append('lever', 'checker'); append('lever', 'merchant'); put('skill', 'bed'); get('start')
workload[2] = put('claws', 'polices'); append('start', 'businesses'); get('claws'); get('start'); get('claws'); get('start'); append('claws', 'percentage'); put('coats', 'acts'); get('start'); append('coats', 'coughs'); put('proficiency', 'turnarounds'); append('start', 'fabrication'); append('start', 'till'); slice('coats', '3:8'); append('start', 'brains'); append('start', 'bunches'); slice('coats', '2:8'); append('proficiency', 'points'); put('assembly', 'abbreviations'); slice('start', '2:0')
workload[3] = slice('start', '3:6'); put('watchstanding', 'rules'); slice('watchstanding', '3:8'); append('watchstanding', 'character'); put('capabilities', 'filler'); append('capabilities', 'sidewalk'); append('watchstanding', 'night'); append('start', 'chemicals'); append('watchstanding', 'capacitor'); put('march', 'multiplications'); put('matter', 'kettles'); put('length', 'coordinates'); append('matter', 'breezes'); put('beam', 'holder'); get('length'); slice('capabilities', '8:1'); slice('length', '4:7'); put('blankets', 'calibration'); append('blankets', 'finger'); get('blankets')
#workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
#workload[2] = put('jedi','luke skywalker'); slice('jedi','0:4'); get('jedi')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = forwarded_request(0,2), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
failures[0,3] = shuttle(0,2), drop_result_stmt()
failures[0,1] = result_shuttle(0,1), change_result()


# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {"length": "rdi", "lever": " checker merchant", "proficiency": " turnarounds points", "claws": " polices percentage", "blankets": " calibration finger", "march": " multiplications", "coats": " co", "matter": " kettles breezes", "shaft": " neutron validations midnight", "whirls": "ur", "meat": " steamers", "stress": " sunlight", "firer": "lit crops commissions", "beam": " holder", "watchstanding": "les character night capacitor", "capabilities": " filler sidewalk", "skill": " bed", "assembly": " abbreviations"}

#####################################################################################################################################################

# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test3

# number of failures to tolerate.  number of replicas is 2t+1.
t = 3
# number of clients
num_client = 8
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = slice('start', '4:0'); slice('start', '2:5'); append('start', 'correlation'); slice('start', '3:9'); get('start'); get('start'); slice('start', '1:5'); get('start'); slice('start', '1:2'); get('start') 
workload[1] = append('start', 'rakes'); append('start', 'meanings'); get('start'); put('evaluations', 'nausea'); append('evaluations', 'walk'); slice('evaluations', '3:1'); slice('start', '9:5'); put('shoe', 'moonlight'); get('evaluations'); slice('shoe', '2:0')
workload[2] = append('start', 'exposures'); slice('start', '3:9'); append('start', 'vol.'); append('start', 'dam'); slice('start', '3:4'); get('start'); append('start', 'pitches'); put('gyroscopes', 'point'); slice('start', '1:5'); append('start', 'petition')
workload[3] = append('start', 'pipe'); get('start'); put('punches', 'handful'); put('pick', 'maples'); slice('pick', '4:2'); get('start'); append('start', 'wardroom'); get('punches'); slice('pick', '9:4'); get('start')
workload[4] = get('start'); slice('start', '8:10'); get('start'); put('blocks', 'street'); get('blocks'); put('substance', 'patch'); slice('start', '9:4'); append('start', 'threats'); put('reservists', 'hazard'); slice('start', '9:5')
workload[5] = put('arts', 'milks'); append('start', 'drive'); get('start'); append('arts', 'ending'); put('relocations', 'bump'); put('blueprint', 'guard'); get('blueprint'); append('blueprint', 'cry'); get('start'); slice('relocations', '9:2')
workload[6] = get('start'); append('start', 'taxes'); put('crowns', 'electrons'); get('crowns'); append('crowns', 'grinder'); get('start'); get('start'); append('crowns', 'burns'); append('start', 'parentheses'); put('turn', 'increment')
workload[7] = append('start', 'berths'); slice('start', '5:7'); get('start'); put('memorandum', 'tensions'); get('start'); slice('memorandum', '1:2'); put('implantation', 'airships'); slice('implantation', '6:3'); put('lands', 'torque'); put('windlasses', 'carload')

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {"substance": " patch", "memorandum": "t", "relocations": " bump", "pick": " maples", "evaluations": " nausea walk", "blueprint": " guard cry", "reservists": " hazard", "punches": " handful", "lands": " torque", "blocks": " street", "windlasses": " carload", "crowns": " electrons grinder burns", "arts": " milks ending", "shoe": " moonlight", "implantation": " airships", "gyroscopes": " point", "turn": " increment"}
 
 
 
#####################################################################################################################################################
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test4

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 3
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,10)
workload[1] = pseudorandom(212,10)
workload[2] = pseudorandom(256,10)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
#####################################################################################################################################################
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test5

# number of failures to tolerate.  number of replicas is 2t+1.
t = 3
# number of clients
num_client = 5
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,5)
workload[1] = pseudorandom(212,5)
workload[2] = pseudorandom(256,5)
workload[3] = pseudorandom(233,5)
workload[4] = pseudorandom(212,5)
# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

failures[0,0] = result_shuttle(0,1), change_operation()
failures[0,6] = shuttle(2,3), drop_result_stmt()
failures[0,2] = shuttle(0,3), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
 
 
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test6

# number of failures to tolerate.  number of replicas is 2t+1.
t = 1
# number of clients
num_client = 10
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(233,5)
workload[1] = pseudorandom(212,5)
workload[2] = pseudorandom(256,5)
workload[3] = pseudorandom(233,5)
workload[4] = pseudorandom(212,5)
workload[5] = pseudorandom(233,5)
workload[6] = pseudorandom(212,5)
workload[7] = pseudorandom(356,5)
workload[8] = pseudorandom(456,5)
workload[9] = pseudorandom(556,5)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
failures[0,2] = shuttle(6,3), change_result()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
 
 
 
 
 
 
 
 
 # test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = stresstest

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 10
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 3000
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 3000
nonhead_timeout = 3000

# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
workload[0] = pseudorandom(203,100) 
workload[1] = pseudorandom(213,100)
workload[2] = pseudorandom(223,100)
workload[3] = pseudorandom(233,100)
workload[4] = pseudorandom(243,100)
workload[5] = pseudorandom(253,100) 
workload[6] = pseudorandom(263,100)
workload[7] = pseudorandom(273,100)
workload[8] = pseudorandom(283,100)
workload[9] = pseudorandom(293,100)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.
# 0th config and 0th replica, the second client sends a message with request number 1, and head decides to crash

# failures[0,0] = result_shuttle(0,1), change_result()
# shuttle(0,3), drop_result_stmt()
# failures[0,1] = result_shuttle(2,1),change_result()
#failures[0,2] = shuttle(0,5), drop_result_stmt()

# 0the config and 2nd replica, 0the client sends message req1 to 2nd replica... 
# failures[1,2] = result_shuttle(0,1),drop();shuttle(1,3),omit_send()

#TEST VALUES
test_dict = {}
 
