Name of the CONFIGURATION file: config/config.csv

Logs: 
    Logs will be generated at logs/<test_case_name>/<replica/olympus/client>.log 


How to add Test Case:
    1. Open config/config.csv
    2. Specify the test paramaters under the line test_case_name = <test_case_name>
    3. Also, specify a test_dict, which will be matched with the result received by the client.


How to verify that dictionary contains expected content at the end of each test case:

    1. python test_suite.py --test_case_name=<name_of_the_test_case>

    Expected output:
    ```
        Verified Key:<key> Value:<value>
    ```

Description about the programmatic check of correctness of dictionary:

    The test_suite.py program loads test cases from config.csv and extracts the test_dict for the corresponding test case
    and compares it to the resultant dictionary obtained at test.json.

    How does it work ?

    The tail replica informs the client about the current state of dictionary. The client writes it to test.json.
    By the end of all operations, the most updated state of dictionary will be written to the test.json .
    Then we compare that result with the expected result mentioned in the config file.


    When does it not work?

    When the client generates pseudorandom workload, we donot know what to compare the resultant_dictionary with. 



Tests:

    =================================================================================================================================
    Test_1: Test case 1 scenario: 
	
	1. Failure: 	failures[0,3] = checkpoint(2), crash()
			In this case, the 4th replica of 0th config will crash when it receives the 2nd checkpoint
			
	2. t=3 => 2*t+1 => 7 replicas
	3. 2 clients
	4. 2 workloads provided (not pseudorandom)
	5. Test case output is provided at the field test_dict
	
	
        Output logs: 
        		logs/test1/replica_head.log
        		logs/test1/replica_tail.log,
        		logs/test1/replica_*.log
        		logs/test1/client_*.log,
        		logs/test1/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test1
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       	Verification:
       		python3 test_suite.py --test_case_name=test1


    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test1
	t = 3
	num_client = 2
	client_timeout = 3000
	head_timeout = 2000
	nonhead_timeout = 1000
	workload[0] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie'); append('hero', ': Batman'); put('actress', 'Gal'); append('actress', ' Gadot')
	workload[1] = put('dude','michael'); append('dude',' scott'); put('love', 'pam'); get('dude'); append('love', ' & Jim'); put('Dwight', 'Shrute'); append('Dwight', ' Angela')
	
	failures[0,3] = checkpoint(2), crash()


    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_2: Test case 2 scenario: 
	
        1. 2 Failures are present:
        	1.1 4th replica drops the heads result statement when it receives the 2nd shuttle message from first client
        	1.2 The head on receiving the 2nd request from first client, it sleeps for 10seconds


        	
        2. t=2 => 2(t) + 1 => 5 replicas
        3. 4 clients
        4. 4 workloads: Each workload contains 20 operations
        
        
        Output logs: 
        		logs/test2/replica_head.log
        		logs/test2/replica_tail.log,
        		logs/test2/replica_*.log
        		logs/test2/client_*.log,
        		logs/test2/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test2
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
        Verification:
       		python3 test_suite.py --test_case_name=test2

    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test2

	t = 2
	num_client = 4 
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	checkpoint_limit = 7
	workload[0] = slice('start', '2:10'); append('start', 'cramp'); put('firer', 'amplitude'); slice('firer', '8:0'); append('start', 'jaw'); slice('firer', '4:7'); put('whirls', 'courts'); get('whirls'); slice('whirls', '9:2'); get('firer'); put('meat', 'steamers'); slice('start', '6:5'); append('firer', 'crops'); get('meat'); get('meat'); append('firer', 'commissions'); slice('whirls', '3:5'); get('whirls'); get('firer'); get('whirls')
	
	workload[1] = get('start'); get('start'); get('start'); append('start', 'downgrades'); put('lever', 'hillside'); get('start'); put('shaft', 'neutron'); put('stress', 'sunlight'); get('shaft'); append('shaft', 'validations'); slice('lever', '9:10'); append('shaft', 'midnight'); slice('stress', '0:0'); slice('lever', '7:8'); slice('lever', '5:1'); slice('lever', '8:9'); append('lever', 'checker'); append('lever', 'merchant'); put('skill', 'bed'); get('start')
	
	workload[2] = put('claws', 'polices'); append('start', 'businesses'); get('claws'); get('start'); get('claws'); get('start'); append('claws', 'percentage'); put('coats', 'acts'); get('start'); append('coats', 'coughs'); put('proficiency', 'turnarounds'); append('start', 'fabrication'); append('start', 'till'); slice('coats', '3:8'); append('start', 'brains'); append('start', 'bunches'); slice('coats', '2:8'); append('proficiency', 'points'); put('assembly', 'abbreviations'); slice('start', '2:0')
	
	workload[3] = slice('start', '3:6'); put('watchstanding', 'rules'); slice('watchstanding', '3:8'); append('watchstanding', 'character'); put('capabilities', 'filler'); append('capabilities', 'sidewalk'); append('watchstanding', 'night'); append('start', 'chemicals'); append('watchstanding', 'capacitor'); put('march', 'multiplications'); put('matter', 'kettles'); put('length', 'coordinates'); append('matter', 'breezes'); put('beam', 'holder'); get('length'); slice('capabilities', '8:1'); slice('length', '4:7'); put('blankets', 'calibration'); append('blankets', 'finger'); get('blankets')
	
	
	failures[0,3] = shuttle(0,2), drop_result_stmt()
	failures[0,0] = client_request(0,2), sleep(10000)
    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_3: Test case 3 scenario: 

        1. 2 Failures:
        	1.1 The tail crashes when it receives the first shuttle message from the first client
        	1.2 The head sleeps for 200seconds when it receives the 2nd forwarded request from client 0.


        2. t=3 => 2(t) + 1 => 7 replicas
        3. 1 Client
	
        Output logs: 
        		logs/test3/replica_head.log
        		logs/test3/replica_tail.log,
        		logs/test3/replica_*.log
        		logs/test3/client_*.log,
        		logs/test3/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test3
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
	Verification:
       		python3 test_suite.py --test_case_name=test3
       		
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test3
	t = 3
	num_client = 1
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	workload[0] = slice('start', '4:0'); slice('start', '2:5'); append('start', 'correlation'); slice('start', '3:9'); get('start'); get('start'); slice('start', '1:5'); get('start'); slice('start', '1:2'); get('start') 
	workload[1] = append('start', 'rakes'); append('start', 'meanings'); get('start'); put('evaluations', 'nausea'); append('evaluations', 'walk'); slice('evaluations', '3:1'); slice('start', '9:5'); put	('shoe', 'moonlight'); get('evaluations'); slice('shoe', '2:0')
	workload[2] = append('start', 'exposures'); slice('start', '3:9'); append('start', 'vol.'); append('start', 'dam'); slice('start', '3:4'); get('start'); append('start', 'pitches'); put('gyroscopes', 'point'); slice('start', '1:5'); append('start', 'petition')
	workload[3] = append('start', 'pipe'); get('start'); put('punches', 'handful'); put('pick', 'maples'); slice('pick', '4:2'); get('start'); append('start', 'wardroom'); get('punches'); slice('pick', '9:4'); get('start')
	workload[4] = get('start'); slice('start', '8:10'); get('start'); put('blocks', 'street'); get('blocks'); put('substance', 'patch'); slice('start', '9:4'); append('start', 'threats'); put('reservists', 'hazard'); slice('start', '9:5')
	workload[5] = put('arts', 'milks'); append('start', 'drive'); get('start'); append('arts', 'ending'); put('relocations', 'bump'); put('blueprint', 'guard'); get('blueprint'); append('blueprint', 'cry'); get('start'); slice('relocations', '9:2')
	workload[6] = get('start'); append('start', 'taxes'); put('crowns', 'electrons'); get('crowns'); append('crowns', 'grinder'); get('start'); get('start'); append('crowns', 'burns'); append('start', 'parentheses'); put('turn', 'increment')
	workload[7] = append('start', 'berths'); slice('start', '5:7'); get('start'); put('memorandum', 'tensions'); get('start'); slice('memorandum', '1:2'); put('implantation', 'airships'); slice('implantation', '6:3'); put('lands', 'torque'); put('windlasses', 'carload')
	
	failures[0,6] = shuttle(0,1), crash()
	failures[0,0] = forwarded_request(0,2), sleep(200000)


    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_4: Test case 4 scenario: 

        1. 1 Failure
        	1.1 The 4th replica drops the first completed checkpoint message
        2. t=3 => 3(t) + 1 => 7 replicas
        3. 1 Client
        4. 1 workload
        
        Output logs: 
        		logs/test4/replica_head.log
        		logs/test4/replica_tail.log,
        		logs/test4/replica_*.log
        		logs/test4/client_*.log,
        		logs/test4/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test4 
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       	Verification: Will fail, we cannot predict the output of the dictionary

    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test4
	t = 3
	num_client = 1
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	workload[0] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie'); append('hero', ': Batman'); put('actress', 'Gal'); append('actress', ' Gadot'); put('justice league','superman'); append('justice league','& wonder woman'); append('justice league',' & Batman')
	failures[0,3] = completed_checkpoint(1), drop()
 

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_5: Test case 5 scenario: 
    	1. 2 failures:
    		1.1 3rd replica crashes when it receives the 3rd shuttle message from first client
    		1.2 On the next configuration, the 4th replica, performs an extra operation
    		
    	2. t=3 => 2(t) + 1 = 7 replicas
    	3. 1 clients
    	4. 1 workload 
    	
    	Output logs: 
        		logs/test5/replica_head.log
        		logs/test5/replica_tail.log,
        		logs/test5/replica_*.log
        		logs/test5/client_*.log,
        		logs/test5/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test5
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
    	

    Example: 
    -----------------------------------------------------------------------------
    test_case_name = test5

	t = 3
	num_client = 1
	client_timeout = 4000
	head_timeout = 1000
	nonhead_timeout = 2000
	workload[0] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie'); append('hero', ': Batman'); put('actress', 'Gal'); append('actress', ' Gadot'); put('justice league','superman'); append('justice league','& wonder woman'); append('justice league','& Batman & Flash'); put('Marvel','Avengers')

	failures[0,2] = shuttle(0,3), crash()
	failures[1,3] = new_configuration(0), extra_op()


    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_6: Test case 6 scenario: 

        1. 2 Failures:
        	1.1 4th replica of the first config, changes the result when it receives the result shuttle
        	1.2 In the next configuration, the head replica increments the slot number.

        2. t=3 => 2(t) + 1 = 7 replicas
        3. 1 Clients
        4. 1 workload
        
        Output logs: 
        		logs/test6/replica_head.log
        		logs/test6/replica_tail.log,
        		logs/test6/replica_*.log
        		logs/test6/client_*.log,
        		logs/test6/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test6
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da

       	Verification: Will fail, we cannot predict the output of the dictionary
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test6
	t = 3
	num_client = 1
	client_timeout = 2000
	head_timeout = 500
	nonhead_timeout = 1000
	workload[0] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie'); append('hero', ': Batman'); put('actress', 'Gal'); append('actress', ' Gadot'); put('justice league','superman'); append('justice league','| wonder woman'); append('justice league','| Batman | Flash'); put('Marvel', 'bad movies'); append('actress',': Married'); put('superman', 'Henry Cavill')
	failures[0,3] = result_shuttle(0,1), change_result()
	failures[1,0] = new_configuration(0), increment_slot()


    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_7: Test case 7 scenario: 

        1. 2 Failures
        	1.1  The 4th replica in the 0th config sleeps for 20s when it receives the 4th shuttle message
        	1.2 The 3rd replica truncates 2 entries from its history when it receives the wedge request

        2. t=3 => 2(t) + 1 = 7 replicas
        3. 1 Client
        4. 1 Workload
        
        Output logs: 
        		logs/stresstest/replica_head.log
        		logs/stresstest/replica_tail.log,
        		logs/stresstest/replica_*.log
        		logs/stresstest/client_*.log,
        		logs/stresstest/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test7
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
       	
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test7

	t = 1
	num_client = 1
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	
	# CLIENT WORKLOAD
	workload[0] = put('movie','star'); append('movie',' wars'); put('hero', 'Ben Affleck'); get('movie'); append('hero', ': Batman'); put('actress', 'Gal'); append('actress', ' Gadot'); put('justice league','superman'); append('justice league','| wonder woman'); append('justice league','| Batman | Flash'); put('Marvel', 'bad movies'); append('actress',': Married'); put('spiderman', 'peter parker'); append('water', 'bottle')
	
	failures[0,3] = shuttle(0,4), sleep(20000)
	failures[0,2] = wedge_request(0), truncate_history(2) 

    -----------------------------------------------------------------------------
    =================================================================================================================================





    =================================================================================================================================
    Test_8: Test case 8 scenario: 

        1. 4 Failures

        	1.1  0th config: the 4th replica drops t+1 complete checkpoint statements
        	1.2 1st config: The 4th replica creates an invalid order signature when it receives the 2nd checkpoint
        	1.3 2nd config: The 3rd replica creates an invalid result signature when it receives the 2nd result_shuttle
        	1.4 2nd config: The head replica crashes when it receives the catch_up request 	

        2. t=3 => 2(t) + 1 = 7 replicas
        3. 1 Client
        4. 1 Workload (pseudorandom workload)
        
        Output logs: 
        		logs/stresstest/replica_head.log
        		logs/stresstest/replica_tail.log,
        		logs/stresstest/replica_*.log
        		logs/stresstest/client_*.log,
        		logs/stresstest/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test8
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       Verfication: It cannot be possible because the workload is random
       	
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test8

	t = 3
	num_client = 1
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	
	# CLIENT WORKLOAD
	workload[0] = pseudorandom(190,50)
	
	failures[0,3] = shuttle(0,5), drop_checkpt_stmts() 
	failures[1,3] = checkpoint(2), invalid_order_sig()
	failures[2,2] = result_shuttle(0,2), invalid_result_sig()
	failures[2,0] = catch_up(0), crash()

    -----------------------------------------------------------------------------
    =================================================================================================================================
    
    =================================================================================================================================
    Test_9: Test case 9 scenario: 

        1. 5 Failures
        	1.1 0th config: the 5th replica drops the 90th shuttle message.
        	1.2 0th config: the 5th replica sleeps for 700ms when it receives a get_running_state message
        	1.3 0th config: The 3rd replica sleeps for 200ms when it receives a get_running_state message
        	1.4 0th config: The head replica sleeps for 300ms when it receives a get_running_state message
        	1.5 0th config: The 4th replica sleeps for 400ms when it receives a get_running_state message

        2. t=2 => 2(t) + 1 = 5 replicas
        3. 1 Client
        4. 1 Workload (pseudorandom workload)
        
        Output logs: 
        		logs/stresstest/replica_head.log
        		logs/stresstest/replica_tail.log,
        		logs/stresstest/replica_*.log
        		logs/stresstest/client_*.log,
        		logs/stresstest/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test9
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       Verfication: It cannot be possible because the workload is random
       	
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test9

	t = 2
	num_client = 1
	client_timeout = 3000
	head_timeout = 1000
	nonhead_timeout = 2000
	
	# CLIENT WORKLOAD
	workload[0] = pseudorandom(190,100)
	
	failures[0,4] = shuttle(0,90), drop(); get_running_state(0), sleep(700)
	failures[0,2] = get_running_state(0), sleep(200)
	failures[0,0] = get_running_state(0), sleep(300)
	failures[0,3] = get_running_state(0), sleep(400)

    -----------------------------------------------------------------------------
    =================================================================================================================================
    
    =================================================================================================================================
    Test_Perform900: Test case Perform900 scenario: 

        1. Failure Free
        2. t=2 => 2(t) + 1 = 5 replicas
        3. 3 Client
        4. 3 Workload (pseudorandom workload) of size 300 each
        
        Output logs: 
        		logs/stresstest/replica_head.log
        		logs/stresstest/replica_tail.log,
        		logs/stresstest/replica_*.log
        		logs/stresstest/client_*.log,
        		logs/stresstest/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=perform900
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       Verfication: It cannot be possible because the workload is random
       	
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = perform900

	t = 2
	num_client = 3
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	
	# CLIENT WORKLOAD
	workload[0] = pseudorandom(190,300)
	workload[1] = pseudorandom(191,300)
	workload[2] = pseudorandom(192,300)
	

    -----------------------------------------------------------------------------
    =================================================================================================================================
    
