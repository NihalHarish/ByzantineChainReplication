Name of the CONFIGURATION file: config/config.csv

Logs: 
    Logs will be generated at logs/<test_case_name>/<replica/olympus/client>.log 


How to add Test Case:
    1. Open config/config.csv
    2. Specify the test paramaters under the line test_case_name = <test_case_name>
    3. Also, specify a test_dict, which will be matched with the result received by the client.


How to verify that dictionary contains expected content at the end of each test case:

    1. python test_suite.py --test_case_name=<name_of_the_test_case>

    Expected output:
    ```
        Verified Key:<key> Value:<value>
    ```

Description about the programmatic check of correctness of dictionary:

    The test_suite.py program loads test cases from config.csv and extracts the test_dict for the corresponding test case
    and compares it to the resultant dictionary obtained at test.json.

    How does it work ?

    The tail replica informs the client about the current state of dictionary. The client writes it to test.json.
    By the end of all operations, the most updated state of dictionary will be written to the test.json .
    Then we compare that result with the expected result mentioned in the config file.


    When does it not work?

    When the client generates pseudorandom workload, we donot know what to compare the resultant_dictionary with. 



Tests:

    =================================================================================================================================
    Test_1: Test case 1 scenario: 
	
	1. Failure: 4th replica changes the result(change_result()) when it receives a result_shuttle message for client 2 request number 1.
			This means that 4th replica will alter its entry of the result_statement in the result shuttle and pass it to the previous replicas.
	2. t=2 => 2*t+1 => 5 replicas
	3. 3 clients
	4. 3 workloads provided (not pseudorandom)
	5. Test case output is provided at the field test_dict
	
	
        Output logs: 
        		logs/test1/replica_head.log
        		logs/test1/replica_tail.log,
        		logs/test1/replica_*.log
        		logs/test1/client_*.log,
        		logs/test1/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test1
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       	Verification:
       		python3 test_suite.py --test_case_name=test1


    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test1
	t = 2
	num_client = 3
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = append('start', 'collection'); append('start', 'frosts'); get('start'); put('handle', 'smile'); append('handle', 'cement'); slice('handle', '3:1'); slice('start', '9:5'); put('discipline', 'interrelation'); get('handle'); slice('discipline', '2:0')
	workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
	workload[2] = get('start'); get('start'); slice('start', '8:6'); get('start'); append('start', 'meetings'); put('ports', 'gross'); put('jewel', 'accidents'); slice('start', '6:9'); get('jewel'); slice('start', '0:9')
	failures[0,3] = result_shuttle(2,1),change_result()
	test_dict = {"ports": " gross", "jewel": " accidents", "discipline": " interrelation", "movie": "star wars", "handle": " smile cement"} 

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_2: Test case 2 scenario: 
	(Replica are numbered from 0)
        1. 2 Failures are present:
        	1.1 4th replica drops_result_statement of the head from the result_proof of result_shuttle when it receives a shuttle for 0th Client and 2nd request.
        	1.2 2nd replica will change_result() when it receives a result_shuttle for 0th Client and request 1.
        2. t=2 => 2(t) + 1 => 5 replicas
        3. 4 clients
        4. 4 workloads: Each workload contains 20 operations
        5. test_dict contain the expected output 
        
        
        Output logs: 
        		logs/test2/replica_head.log
        		logs/test2/replica_tail.log,
        		logs/test2/replica_*.log
        		logs/test2/client_*.log,
        		logs/test2/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test2
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
        Verification:
       		python3 test_suite.py --test_case_name=test2

    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test2

	t = 2
	num_client = 4 
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = slice('start', '2:10'); append('start', 'cramp'); put('firer', 'amplitude'); slice('firer', '8:0'); append('start', 'jaw'); slice('firer', '4:7'); put('whirls', 'courts'); get('whirls'); slice('whirls', '9:2'); get('firer'); put('meat', 'steamers'); slice('start', '6:5'); append('firer', 'crops'); get('meat'); get('meat'); append('firer', 'commissions'); slice('whirls', '3:5'); get('whirls'); get('firer'); get('whirls')
	
	workload[1] = get('start'); get('start'); get('start'); append('start', 'downgrades'); put('lever', 'hillside'); get('start'); put('shaft', 'neutron'); put('stress', 'sunlight'); get('shaft'); append('shaft', 'validations'); slice('lever', '9:10'); append('shaft', 'midnight'); slice('stress', '0:0'); slice('lever', '7:8'); slice('lever', '5:1'); slice('lever', '8:9'); append('lever', 'checker'); append('lever', 'merchant'); put('skill', 'bed'); get('start')
	
	workload[2] = put('claws', 'polices'); append('start', 'businesses'); get('claws'); get('start'); get('claws'); get('start'); append('claws', 'percentage'); put('coats', 'acts'); get('start'); append('coats', 'coughs'); put('proficiency', 'turnarounds'); append('start', 'fabrication'); append('start', 'till'); slice('coats', '3:8'); append('start', 'brains'); append('start', 'bunches'); slice('coats', '2:8'); append('proficiency', 'points'); put('assembly', 'abbreviations'); slice('start', '2:0')
	
	workload[3] = slice('start', '3:6'); put('watchstanding', 'rules'); slice('watchstanding', '3:8'); append('watchstanding', 'character'); put('capabilities', 'filler'); append('capabilities', 'sidewalk'); append('watchstanding', 'night'); append('start', 'chemicals'); append('watchstanding', 'capacitor'); put('march', 'multiplications'); put('matter', 'kettles'); put('length', 'coordinates'); append('matter', 'breezes'); put('beam', 'holder'); get('length'); slice('capabilities', '8:1'); slice('length', '4:7'); put('blankets', 'calibration'); append('blankets', 'finger'); get('blankets')
	
	
	failures[0,3] = shuttle(0,2), drop_result_stmt()
	failures[0,1] = result_shuttle(0,1), change_result()
	
	test_dict = {"length": "rdi", "lever": " checker merchant", "proficiency": " turnarounds points", "claws": " polices percentage", "blankets": " calibration finger", "march": " multiplications", "coats": " co", "matter": " kettles breezes", "shaft": " neutron validations midnight", "whirls": "ur", "meat": " steamers", "stress": " sunlight", "firer": "lit crops commissions", "beam": " holder", "watchstanding": "les character night capacitor", "capabilities": " filler sidewalk", "skill": " bed", "assembly": " abbreviations"}

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_3: Test case 3 scenario: 

        1. Failure-free
        2. t=3 => 2(t) + 1 => 7 replicas
        3. 8 Clients
        4. 8 Workloads: Each workload has 10 operations
	5. test_dict: Contains the expected output dictionary
	
	
        Output logs: 
        		logs/test3/replica_head.log
        		logs/test3/replica_tail.log,
        		logs/test3/replica_*.log
        		logs/test3/client_*.log,
        		logs/test3/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test3
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
	Verification:
       		python3 test_suite.py --test_case_name=test3
       		
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test3
	t = 3
	num_client = 8
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = slice('start', '4:0'); slice('start', '2:5'); append('start', 'correlation'); slice('start', '3:9'); get('start'); get('start'); slice('start', '1:5'); get('start'); slice('start', '1:2'); get('start') 
	workload[1] = append('start', 'rakes'); append('start', 'meanings'); get('start'); put('evaluations', 'nausea'); append('evaluations', 'walk'); slice('evaluations', '3:1'); slice('start', '9:5'); put	('shoe', 'moonlight'); get('evaluations'); slice('shoe', '2:0')
	workload[2] = append('start', 'exposures'); slice('start', '3:9'); append('start', 'vol.'); append('start', 'dam'); slice('start', '3:4'); get('start'); append('start', 'pitches'); put('gyroscopes', 'point'); slice('start', '1:5'); append('start', 'petition')
	workload[3] = append('start', 'pipe'); get('start'); put('punches', 'handful'); put('pick', 'maples'); slice('pick', '4:2'); get('start'); append('start', 'wardroom'); get('punches'); slice('pick', '9:4'); get('start')
	workload[4] = get('start'); slice('start', '8:10'); get('start'); put('blocks', 'street'); get('blocks'); put('substance', 'patch'); slice('start', '9:4'); append('start', 'threats'); put('reservists', 'hazard'); slice('start', '9:5')
	workload[5] = put('arts', 'milks'); append('start', 'drive'); get('start'); append('arts', 'ending'); put('relocations', 'bump'); put('blueprint', 'guard'); get('blueprint'); append('blueprint', 'cry'); get('start'); slice('relocations', '9:2')
	workload[6] = get('start'); append('start', 'taxes'); put('crowns', 'electrons'); get('crowns'); append('crowns', 'grinder'); get('start'); get('start'); append('crowns', 'burns'); append('start', 'parentheses'); put('turn', 'increment')
	workload[7] = append('start', 'berths'); slice('start', '5:7'); get('start'); put('memorandum', 'tensions'); get('start'); slice('memorandum', '1:2'); put('implantation', 'airships'); slice('implantation', '6:3'); put('lands', 'torque'); put('windlasses', 'carload')
	
	test_dict = {"substance": " patch", "memorandum": "t", "relocations": " bump", "pick": " maples", "evaluations": " nausea walk", "blueprint": " guard cry", "reservists": " hazard", "punches": " handful", "lands": " torque", "blocks": " street", "windlasses": " carload", "crowns": " electrons grinder burns", "arts": " milks ending", "shoe": " moonlight", "implantation": " airships", "gyroscopes": " point", "turn": " increment"}

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_4: Test case 4 scenario: 

        1. Failure free
        2. t=2 => 2(t) + 1 => 5 replicas
        3. 3 Clients
        4. 3 pseudorandom workloads with 10 random operations each
        5. test dict is empty because we cannot predict the output of the dictionary
        
        Output logs: 
        		logs/test4/replica_head.log
        		logs/test4/replica_tail.log,
        		logs/test4/replica_*.log
        		logs/test4/client_*.log,
        		logs/test4/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test4 
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
        	
       	Verification: Will fail, we cannot predict the output of the dictionary

    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test4
	t = 2
	num_client = 3
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = pseudorandom(233,10)
	workload[1] = pseudorandom(212,10)
	workload[2] = pseudorandom(256,10)
	test_dict = {}
 

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_5: Test case 5 scenario: 
    	1. 3 failures:
    		1.1 The head changes the operation(change_operation()) when it receives result_shuttle for 0th Client and Request 1
    		1.2 The tail replica drops the head result_statement from the result proof of the result shuttle when it receives a shuttle message for Client 2 and request 3
    		1.3 The 3rd replica changes the result(change_result()) when it receives a shuttle message for Client 0 and request 3
    		
    	2. t=3 => 2(t) + 1 = 7 replicas
    	3. 5 clients
    	4. 5 pseudorandom workloads which generate 5 operation requests
    	
    	Output logs: 
        		logs/test5/replica_head.log
        		logs/test5/replica_tail.log,
        		logs/test5/replica_*.log
        		logs/test5/client_*.log,
        		logs/test5/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test5
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da
    	
       	Verification: Will fail, we cannot predict the output of the dictionary

    Example: 
    -----------------------------------------------------------------------------
    test_case_name = test5

	t = 3
	num_client = 5
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = pseudorandom(233,5)
	workload[1] = pseudorandom(212,5)
	workload[2] = pseudorandom(256,5)
	workload[3] = pseudorandom(233,5)
	workload[4] = pseudorandom(212,5)

	failures[0,0] = result_shuttle(0,1), change_operation()
	failures[0,6] = shuttle(2,3), drop_result_stmt()
	failures[0,2] = shuttle(0,3), change_result()
	test_dict = {}


    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_6: Test case 6 scenario: 

        1. Failure:
        	1.1 Tail replica changes the result when it receives the shuttle message for 6th Client RequestID 3
        2. t=1 => 2(t) + 1 = 3 replicas
        3. 10 Clients
        4. 10 pseudorandom workload which generate 5 random dictionary operations
        
        Output logs: 
        		logs/test6/replica_head.log
        		logs/test6/replica_tail.log,
        		logs/test6/replica_*.log
        		logs/test6/client_*.log,
        		logs/test6/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=test6
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da

       	Verification: Will fail, we cannot predict the output of the dictionary
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = test6
	t = 1
	num_client = 10
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	workload[0] = pseudorandom(233,5)
	workload[1] = pseudorandom(212,5)
	workload[2] = pseudorandom(256,5)
	workload[3] = pseudorandom(233,5)
	workload[4] = pseudorandom(212,5)
	workload[5] = pseudorandom(233,5)
	workload[6] = pseudorandom(212,5)
	workload[7] = pseudorandom(356,5)
	workload[8] = pseudorandom(456,5)
	workload[9] = pseudorandom(556,5)
	failures[0,2] = shuttle(6,3), change_result()
	test_dict = {}

    -----------------------------------------------------------------------------
    =================================================================================================================================


    =================================================================================================================================
    Test_StressTest: Stresstest scenario: 

        1. Failure-Free
        2. t=1 => 2(t) + 1 = 3 replicas
        3. 10 Clients
        4. 10 pseudorandom workload which generate 100 random dictionary operations
        
        Output logs: 
        		logs/stresstest/replica_head.log
        		logs/stresstest/replica_tail.log,
        		logs/stresstest/replica_*.log
        		logs/stresstest/client_*.log,
        		logs/stresstest/olympus.log
        		
        Run: 
        	python3 -m da --message-buffer-size 10240000 -n MainNode main.da --test_case_name=stresstest
        	python3 -m da --message-buffer-size 10240000 -n OlympusNode olympus.da
        	python3 -m da --message-buffer-size 10240000 -n ClientNode client.da

       	Verification: Will fail, we cannot predict the output of the dictionary
       	
    Example: 
    -----------------------------------------------------------------------------
	test_case_name = stresstest

	t = 1
	num_client = 10
	client_timeout = 3000
	head_timeout = 3000
	nonhead_timeout = 3000
	
	# CLIENT WORKLOAD
	workload[0] = pseudorandom(203,100) 
	workload[1] = pseudorandom(213,100)
	workload[2] = pseudorandom(223,100)
	workload[3] = pseudorandom(233,100)
	workload[4] = pseudorandom(243,100)
	workload[5] = pseudorandom(253,100) 
	workload[6] = pseudorandom(263,100)
	workload[7] = pseudorandom(273,100)
	workload[8] = pseudorandom(283,100)
	workload[9] = pseudorandom(293,100)
	test_dict = {}

    -----------------------------------------------------------------------------
    =================================================================================================================================

