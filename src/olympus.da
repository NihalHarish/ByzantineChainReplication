from Crypto.PublicKey import RSA
from Crypto import Random

import uuid
import re

from replica import Replica
import message_type
import config_handler


GET_CONFIG = 'get_config'
SEND_CONFIG = 'take_config'


class Olympus(process):
    def setup(client_list: instance, test_case: str):
        self.public_key = None
        self.replicas_key_pairs = {}
        self.replicas_data = {}    #TODO: Change variable name??
        self.replica_list = []
        self.head_node = None
        self.client_list = client_list
        self.config = {}
        self.test_case = test_case

    def generate_replica_key_pair(replica_id):
        random_generator = Random.new().read
        key = RSA.generate(1024, random_generator)
        public_key = key.publickey().exportKey()
        self.replicas_key_pairs[replica_id] = public_key
        return (key, self.replicas_key_pairs)

    def init_replicas(number):
        replicas = list(new(Replica, num= number))
        replica_ids = [uuid.uuid4().hex for replica in replicas]
        keys  = [generate_replica_key_pair(replica_id) for replica_id in replica_ids]

        for i, replica in enumerate(replicas):
            replica_id = replica_ids[i]
            isHead = True if i==0 else False
            isTail = True if i==(len(replicas)-1) else False

            prev_r = None if isHead else replicas[i-1]
            next_r = None if isTail else replicas[i+1]

            key, keychain = keys[i]
            if isHead:
                self.head_node = replica
            setup({replica}, (isHead, isTail, replica_id, prev_r, next_r, key, keychain, self.client_list, self.head_node))
        start(replicas)
        self.replica_list = replicas

    def parse_workload(workload):
        match = re.match('^[^\(]+', workload)
        if match == 'pseudorandom':
            seed, size = key, value = re.search('\(([^)]+)\)', workload).group()[1:-1].replace("'", "").split(',')
            workload = config_handler.pseudorandom(seed, size)
        return workload

    def craft_client_config(client):
        client_index = self.client_list.index(client)
        config = config_handler.load_config()[test_case]
        client_config = {}
        client_config['client_timeout'] = config['client_timeout']
        client_config['workload']       = parse_workload(self.config['workload'][client_index])
        client_config['replica_list']   = self.replica_list
        client_config['head_node']      = self.head_node
        client_config['replica_keys']   = self.replicas_key_pairs
        client_config['replicas']       = self.replica_list
        client_config['t']              = config['t']
        return client_config


    def receive(msg=(GET_CONFIG, ), from_=client):
        print("Olympus has received config request from client: ", client)
        config = craft_client_config(client)
        send((SEND_CONFIG, config), to=client)
        print("Olympus has sent config to client: ", client)

    def run():
        self.config = config_handler.load_config()[self.test_case]
        t = self.config['t']
        t = 2*t + 1
        print("T: ", t)
        init_replicas(t)
        print("Olympus Running")
        await(False)

#def main():
#    olympus = new(Olympus, args=())
#    start(olympus)

