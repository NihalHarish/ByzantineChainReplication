from Crypto.PublicKey import RSA
from Crypto import Random

import uuid
import logging

from replica import Replica
import message_type
import config_handler

import os

GET_CONFIG = 'get_config'
SEND_CONFIG = 'take_config'


class Olympus(process):
    def setup(client: instance, test_case: str):
        self.public_key = None
        self.replicas_key_pairs = {}
        self.replicas_data = {}    #TODO: Change variable name??
        self.replica_list = []
        self.head_node = None
        self.client = client
        self.config = {}
        self.test_case = test_case

    def generate_replica_key_pair(replica_id):
        random_generator = Random.new().read
        key = RSA.generate(1024, random_generator)
        public_key = key.publickey().exportKey()
        self.replicas_key_pairs[replica_id] = public_key
        return (key, self.replicas_key_pairs)

    def init_replicas(number):
        logging.info("Staring replica init for t = "+ str(number)) 
        replicas = list(new(Replica, num= number))
        replica_ids = [uuid.uuid4().hex for replica in replicas]
        keys  = [generate_replica_key_pair(replica_id) for replica_id in replica_ids]

        for i, replica in enumerate(replicas):
            replica_id = replica_ids[i]
            isHead = True if i==0 else False
            isTail = True if i==(len(replicas)-1) else False

            prev_r = None if isHead else replicas[i-1]
            next_r = None if isTail else replicas[i+1]

            key, keychain = keys[i]
            if isHead:
                self.head_node = replica
            setup({replica}, (isHead, isTail, replica_id, prev_r, next_r, key, keychain, self.client, self.head_node))
        start(replicas)
        logging.info("Replica init for t = "+ str(number) + " is complete") 
        self.replica_list = replicas

    def init_logger():
        logging_directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../logs/')
        logging.basicConfig(filename=os.path.join(logging_directory, 'olympus.log'), filemode='w', level=logging.INFO)

    def receive(msg=(GET_CONFIG, ), from_=client):
        config = config_handler.load_config()
        logging.info("Olympus has received config request from client: "+ str(client))
        config['replica_list'] = self.replica_list
        config['head_node'] = self.head_node
        config['replica_keys'] = self.replicas_key_pairs
        config['replicas'] = self.replica_list
        send((SEND_CONFIG, config), to=client)
        logging.info("Olympus has sent config to client: "+ str(client))

    def run():
        init_logger()
        logging.info("Olympus has started")
        self.config = config_handler.load_config()[self.test_case]
        t = self.config['t']
        t = 2*t + 1
        print("T: ", t)
        init_replicas(t)
        print("Olympus Running")
        await(False)
