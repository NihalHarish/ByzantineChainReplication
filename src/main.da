import uuid
from olympus import Olympus
from client import Client
from Crypto import Random
from Crypto.PublicKey import RSA
from optparse import OptionParser
import config_handler
import os

def generate_key_pair():
    random_generator = Random.new().read
    key = RSA.generate(1024, random_generator)
    return key

def test_json_handler():
    test_json = open('test.json', 'w')
    return test_json

def main():
    option_parser = OptionParser()
    option_parser.add_option("--test_case_name", dest='test_case', help = 'test case name in the config file that should be run', metavar='TESTCASE')
    (options, args) = option_parser.parse_args()
    test_case = None

    if not options.test_case:
        print("Test Case Name Not Supplied")
        print("Loading Default: test1")
        test_case = "test1"
    else:
        test_case = options.test_case

    logging_directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../logs/{0}'.format(test_case))
    if not os.path.isdir(logging_directory):
        os.mkdir(logging_directory)

    config = config_handler.load_config()[test_case]
    failures = config['failures']
    print(failures)

    config(clock='Lamport')
    olympus = new(Olympus, at='OlympusNode')

    new_clients = list(new(Client, num= int(config['num_client']), at='ClientNode')) # TODO: read from config

    client_dict = {}
    client_keys = {}
    test_json_f = test_json_handler()
    for i ,c in enumerate(new_clients):
        unique_id = uuid.uuid4().hex
        client_dict[unique_id] = c
        crypt_key = generate_key_pair()
        client_keys[unique_id] = crypt_key.publickey()
        #setup(c, (olympus, unique_id, crypt_key, test_case, test_json_handler()))
        #setup(c, (olympus, unique_id, crypt_key, test_case, test_json_f))
        setup(c, (olympus, unique_id, crypt_key, test_case))


    setup(olympus, (client_dict, new_clients, client_keys, test_case))
    start(olympus)
    start(new_clients)
