import config_handler
from Crypto.Hash import SHA256

import re
import uuid
import time
#messages

GET_CONFIG = 'get_config'
CONFIG_RECEIVED = 'take_config'


class Client(process):

    #def setup(client_id: str, key: instance, replica_keychain: dict, olympus_key: instance, request_number: int, timer_request: instance, time_retransmission: instance, config_file: dict, operation_set: set):
    #    pass

    def setup(olympus: instance):
        self.olympus = olympus
        self.config = None
        self.request_number = 0
        self.client_id = uuid.uuid4().hex

    def request_config_from_olympus():
        send((GET_CONFIG,), to=self.olympus)
        print('Client is about to await')
        await(some(received((CONFIG_RECEIVED, config))))
        print("Client has received config: ", config)
        return config

    def make_operation_payload(operation):
        operation_payload = {}
        print('Operation: ', operation)
        operation_payload['opr'] = re.match('^[^\(]+', operation).group()
        key, value = re.search('\(([^)]+)\)', operation).group()[1:-1].replace("'", "").split(',') 
        operation_payload['payload'] = {}
        operation_payload['payload']['key']   = key
        operation_payload['payload']['value'] = value
        operation_payload['client_id'] = self.client_id
        operation_payload['request_number'] = self.request_number
        return operation_payload

    def get_head(config):
        '''
        replicas = config['replica_list']
        for replica in replicas:
            if replica.isHead:
                return replica
        else:
            return None
        '''
        return config['head_node']

    def parse_workload(workload):
        workload_list = workload.split(';')
        print('Workload List: ', workload_list)
        operation_set = []
        for work in workload_list:
            operation_set.append(work)
        return operation_set

    def client_request():
        self.config = request_config_from_olympus()
        operation_set  = parse_workload(self.config['workload[1]'])
        print('Operation Set: ', operation_set)
        something = make_operation_payload(operation_set[0])
        head = get_head(self.config)
        print(something)
        send(('please_work', something), to=head)
        time.sleep(3)
        something_again = {'request_number': 1, 'client_id': '1a774ed9e41d4ed89ff221e837027e7c', 'payload': {'key': 'movie', 'value': ' wars'}, 'opr': 'append'}
        send(('please_work', something_again), to=head)

    def run():
        print('Client running')
        client_request()


    '''
    def receive(msg=('operation_result', response), from_=head):
        print(response)
        def validate_response():
                result = response['result']
                result_proof = response['result_proof']
                hashed_result = SHA256.new(result).hexdigest()
                count = 0
                # for index, proof in enumerate(result_proof):
                #    if hashed_result == 
                return None

    def retransmit():
        self.timer_retransmission = time.clock()
        for replica in replica_set:
            send(('retransmission', client_id, encrypted_payload, private_key), to=replica)
            if await(received(('response', response), from_=replica)):
                pass
            elif timeout(TIMEOUT):
                #invalidate response
                pass

    '''
