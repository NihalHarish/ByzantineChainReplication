import config_handler
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
import json
import re
import uuid
import time
import logging
import os
import time
#messages

GET_CONFIG = 'get_config'
CONFIG_RECEIVED = 'take_config'


class Client(process):

    #def setup(client_id: str, key: instance, replica_keychain: dict, olympus_key: instance, request_number: int, timer_request: instance, time_retransmission: instance, config_file: dict, operation_set: set):
    #    pass

    def setup(olympus: instance):
        self.olympus = olympus
        self.config = None
        self.request_number = 0
        self.client_id = uuid.uuid4().hex
        self.replica_keys = {}
        self.request_timeout = 10
        self.head = None
        self.tail = None
        self.replicas =[]
        self.T = 3

    def request_config_from_olympus():
        print('Request for config')
        logging.info("Client has requested for config from olympus: " + str(olympus))
        send((GET_CONFIG,), to=self.olympus)
        logging.info('Client is waiting for a response from olympus: ' +str(olympus))
        await(some(received((CONFIG_RECEIVED, config))))
        logging.info("Client has received the config: ", config)
        return config

    def craft_operation_payload(operation):
        operation_payload = {}
        print('Operation: ', operation)
        operation_payload['opr'] = re.match('^[^\(]+', operation).group().strip()
        if operation_payload['opr'] == 'get':
            value = re.search('\(([^)]+)\)', operation).group()[1:-1].replace("'","")
            key = None
        else:
            key, value = re.search('\(([^)]+)\)', operation).group()[1:-1].replace("'", "").split(',')
        operation_payload['payload'] = {}
        operation_payload['payload']['key']   = key.strip()
        operation_payload['payload']['value'] = value.strip()
        operation_payload['client_id'] = self.client_id
        operation_payload['request_number'] = self.request_number
        return operation_payload

    def get_head(config):
        return config['head_node']

    def parse_workload(workload):
        workload_list = workload.split(';')
        print('Workload List: ', workload_list)
        operation_set = []
        for work in workload_list:
            operation_set.append(work)
        return operation_set[:-1]

    def validate_result_proof(replica_response):
        '''
            We check if atleast t+1 replicas have verfied or not
        '''
        result, result_proof, status = replica_response
        correct_replica = 0
        result_state_json = json.dumps(result).encode('utf-8')
        hashed_result = SHA256.new(result_state_json).hexdigest()

        for result_statement in result_proof:
            signature, statement, replica_id = result_statement
            _, result_hash, status = statement  # ('result', result_hash, status)
            hashed_statement = SHA256.new(json.dumps(statement).encode('utf-8')).digest()
            public_key = self.replica_keys[replica_id]
            if public_key.verify(hashed_statement, signature):
                if result_hash == hashed_result:
                    correct_replica += 1

        if correct_replica >= self.T + 1:
            print(status)
            return True
        return False


    def retransmission_request(payload):
        for replica in self.replicas:
            send(('retransmission', payload), to=replica)

        if await(some(received(('result', finale_result)))):
            if validate_result_proof(finale_result):
                self.request_number += 1
            else:
                print('Invalid Result Proof')

        elif some(received(('error', _))):
            print('Some replica is in immutable stage')

        elif timeout(self.request_timeout):
            print('TIMEOUT HAS EXPIRED YET AGAIN')
            # start over


    def make_operation_request():
        workload = self.config['workload']
        operation_set = parse_workload(workload)
        #operation_set = ["append('start', 'countermeasure')", "append('start', 'saying')", "put('lights', 'remedy')", "append('lights', 'combat')"]
        for oprn in operation_set:
            payload = craft_operation_payload(oprn)
            send(('please_work', payload), to=head)
            if await(some(received(('result', finale_result)))):
                # if validate_result_proof(finale_result):
                #     self.request_number+=1
                # else:
                #     print('Invalid result proof')
                #     # start over
                pass
            elif timeout(self.request_timeout):
                print('TIMEOUT HAS EXPIRED')
                retransmission_request(payload)

    def receive(msg=('result', something), from_=c):
        if validate_result_proof(something):
            self.request_number += 1
        else:
            print('Invalid result_proof')


    def start_over():
        self.config = {}
        self.config = request_config_from_olympus()
        self.request_timeout = self.config['client_timeout']
        self.head = self.config['head_node']
        self.tail = self.config['tail_node']
        self.T = int(self.config['t'])
        self.replicas = self.config['replicas']
        build_replica_keys()
        make_operation_request()

    def init_logger():
        logging_directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), '../logs')
        logging.basicConfig(filename=os.path.join(logging_directory, 'client.log'), filemode='w', level=logging.DEBUG)

    def build_replica_keys():
        for replica_id, public_key in self.config['replica_keys'].items():
            self.replica_keys[replica_id] = RSA.importKey(public_key)

    def run():
        init_logger()
        logging.info("Client running")
        print('Client running')
        start_over()
        await(False)
        #self.config = request_config_from_olympus()
        #make_operation_request()
        #client_request()
