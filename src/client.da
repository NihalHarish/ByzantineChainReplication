import config_handler
from Crypto.Hash import SHA256

#messages

GET_CONFIG = 'get_config'
CONFIG_RECEIVED = 'take_config'


class Client(process):
    

    #def setup(client_id: str, key: instance, replica_keychain: dict, olympus_key: instance, request_number: int, timer_request: instance, time_retransmission: instance, config_file: dict, operation_set: set):
    #    pass

    def setup(olympus: instance):
        self.olympus = olympus
        self.config = None

    def request_config_from_olympus():
        send((GET_CONFIG,), to=self.olympus)
        await(some(received((CONFIG_RECEIVED, config), from_=self.olympus)))
        return config

    
    def client_request():
        self.config = request_config_from_olympus()
        print('Client Config: ', self.config)

    def run():
        print('Client running')
        client_request()


    '''
    def receive(msg=('operation_result', response), from_=head):
        print(response)
        def validate_response():
                result = response['result']
                result_proof = response['result_proof']
                hashed_result = SHA256.new(result).hexdigest()
                count = 0
                # for index, proof in enumerate(result_proof):
                #    if hashed_result == 
                return None

    def retransmit():
        self.timer_retransmission = time.clock()
        for replica in replica_set:
            send(('retransmission', client_id, encrypted_payload, private_key), to=replica)
            if await(received(('response', response), from_=replica)):
                pass
            elif timeout(TIMEOUT):
                #invalidate response
                pass

    '''
