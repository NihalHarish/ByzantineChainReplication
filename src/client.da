import config_handler
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
import random
import json
import re
import uuid
import time
import logging
import os
import time
import sys
# messages

GET_CONFIG = 'get_config'
CONFIG_RECEIVED = 'take_config'


class Client(process):

    def setup(olympus: instance, unique_id: str, client_index: int, crypt_key: instance, test_case: str, olympus_public_key: instance):
        self.olympus = olympus
        self.config = None
        self.request_number = 0
        self.client_id = unique_id  # uuid.uuid4().hex
        self.replica_keys = {}
        self.request_timeout = 10
        self.head = None
        self.tail = None
        self.replicas = []
        self.crypt_key = crypt_key
        self.failures = []
        self.test_case = test_case
        print('Client got key ', self.crypt_key)
        self.T = 3
        self.olympus_public_key = olympus_public_key
        self.client_index - client_index

    def validate_olympus(message):
        signature, nonce = message
        if self.olympus_public_key.verify(nonce, signature):
            return True
        return False

    def request_config_from_olympus():
        print('Request for config')
        logging.info(
            "Client has requested for config from olympus: " +
            str(olympus))
        signature = sign_message()
        send((GET_CONFIG, signature), to=self.olympus)
        logging.info(
            'Client is waiting for a response from olympus: ' +
            str(olympus))
        await(some(received((CONFIG_RECEIVED, config, signature))))
        if validate_olympus(signature):
            logging.info("Client has received the config: ", config)
            return config
        else:
            sys.exit(0)

    def sign_message():
        nonce = random.randint(1, 1000)
        message = self.crypt_key.sign(nonce, '')
        return (message, nonce, client_id)

    def craft_operation_payload(operation):
        operation_payload = {}
        print(
            '{0}: Operation: {1}'.format(
                self.client_id,
                self.request_number),
            operation)
        operation_payload['opr'] = re.match(
            r'^[^\(]+', operation).group().strip()
        if operation_payload['opr'] == 'get':
            value = re.search(
                r'\(([^)]+)\)',
                operation).group()[
                1:-
                1].replace(
                "'",
                "")
            key = None
        else:
            key, value = re.search(
                r'\(([^)]+)\)', operation).group()[1:-1].replace("'", "").split(',')
        operation_payload['payload'] = {}
        operation_payload['payload']['key'] = key.strip() if key else None
        operation_payload['payload']['value'] = value
        operation_payload['client_id'] = self.client_id
        operation_payload['request_number'] = self.request_number
        return operation_payload

    def get_head(config):
        return config['head_node']

    def parse_pseudorandom_workloads(workload):
        match = re.match(r'^[^\(]+', workload).group()
        if match == 'pseudorandom':
            seed, size = re.search(
                r'\(([^)]+)\)', workload).group()[1:-1].replace("'", "").split(',')
            seed = int(seed)
            size = int(size)
            workload = config_handler.pseudorandom(seed, size)
        return workload
        
    def parse_workload(workload):
        workload = parse_pseudorandom_workloads(workload)
        workload_list = workload.split(';')
        print('Workload: ', workload_list)
        operation_set = []
        for work in workload_list:
            operation_set.append(work)
        if operation_set[-1] == ' ':
            return operation_set[:-1]
        return operation_set

    def validate_result_proof(replica_response):
        '''
            We check if atleast t+1 replicas have verfied or not
        '''
        result, result_proof, status, request_num = replica_response
        correct_replica = 0
        replica_correctness = {}

        for result_statement in result_proof:
            signature, statement, replica_id = result_statement
            # ('result', result_hash, status)
            _, result_hash, status = statement
            if result_hash not in replica_correctness:
                replica_correctness[result_hash] = 1
            hashed_statement = SHA256.new(
                json.dumps(statement).encode('utf-8')).digest()
            public_key = self.replica_keys[replica_id]
            if public_key.verify(hashed_statement, signature):
                # trying to aggregate atleast t+1 consistent hashes
                replica_correctness[result_hash] += 1

        correct_replica = max(replica_correctness.values())
        if correct_replica >= self.T + 1:
            print(str(self.client_id) + " : " + status + " " + str(result) + " " + str(correct_replica))
            return True
        return False

    def retransmission_request(payload):
        signature = sign_message()
        for replica in self.replicas:
            send(('retransmission', payload, signature), to=replica)

        if await(some(received(('result', finale_result)))):
            if validate_result_proof(finale_result):
                self.request_number += 1
            else:
                print('Invalid Result Proof: Informing Olympus: Exit')
                sys.exit(0)

        elif some(received(('error', _))):
            print('Some replica is in immutable stage: Informing Olympus: Exit')
            logging.info(
                str(client_id) +
                ': Some replica is in immutable stage: Informing Olympus: Exit')
            sys.exit(0)

        elif timeout(self.request_timeout):
            print('Timeout expired yet again: Informing Olympus: Exit')
            logging.info(
                str(client_id) +
                ' : TIMEOUT expired yet again: Informing Olympus: Exit')
            sys.exit(0)

    def make_operation_request():
        #workload = self.config['workload']
        workload = config_handler.get_workload(self.client_index, self.test_case)
        operation_set = parse_workload(workload)
        for oprn in operation_set:
            payload = craft_operation_payload(oprn)
            signature = sign_message()
            # send(('please_work', payload, signature), to=head)
            send(('client-request', payload, signature), to=head)
            req_id = self.request_number
            if await(some(received(('result', finale_payload),
                                   from_=self.tail),
                          has=finale_payload[-1] == req_id)):
                pass
            elif timeout(self.request_timeout):
                print('TIMEOUT HAS EXPIRED')
                logging.info(str(client_id) + ': TIMEOUT HAS EXPIRED')
                retransmission_request(payload)

    def receive(msg=('result', result), from_=tail):
        print('Result received from the tail by ' + str(client_id))
        if validate_result_proof(result):
            self.request_number += 1
        else:
            logging.info('Invalid result_proof from tail: Informing Olympus: Exit')
            print('Invalid result_proof from tail: Informing Olympus: Exit')
            sys.exit(0)
        # print(str(client_id) + ' has received: ' + str(result[0]))
        logging.info(str(client_id) + ' has received: ' + str(result[0]))
        with open('test.json', 'w') as test_log:
            test_log.write(json.dumps(result[0]))
            print(str(self.client_id) + " wrote " + str(result[0]))

    def start_over():
        print('Start Over')
        self.config = {}
        self.config = request_config_from_olympus()
        self.request_timeout = float(self.config['client_timeout'])
        self.head = self.config['head_node']
        self.tail = self.config['tail_node']
        self.T = int(self.config['t'])
        self.replicas = self.config['replicas']
        self.failures = self.config['failures']
        build_replica_keys()
        make_operation_request()

    def init_logger():
        logging_directory = os.path.join(os.path.dirname(os.path.abspath
                                                         (__file__)),
                                         '../logs/{0}'.format(test_case))
        logging.basicConfig(
            filename=os.path.join(
                logging_directory,
                'client_{0}.log'.format(client_id)),
            filemode='w',
            level=logging.DEBUG)

    def build_replica_keys():
        for replica_id, public_key in self.config['replica_keys'].items():
            self.replica_keys[replica_id] = RSA.importKey(public_key)

    def run():
        init_logger()
        logging.info("Client running")
        print('Client running')
        start_over()
        await(False)
