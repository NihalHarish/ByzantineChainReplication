import uuid

REPLICA_PENDING = 'PENDING'
REPLICA_ACTIVE = 'ACTIVE'
REPLICA_IMMUTABLE = 'IMMUTABLE'

class Replica(process):
    def setup(isHead: bool, isTail: bool, unique_id: str, prev_replica: Replica, next_replica: Replica):
        self.uuid = unique_id
        self.running_state = {}
        self.history = []
        self.mode = REPLICA_ACTIVE
        self.prev_replica = prev_replica
        self.next_replica = next_replica
        self.public_keys = {}
        self.private_key = None
        self.result_shuttle_cache = {}
        self.checkpoint_proof_cache = {}
        self.isHead = False
        self.isTail = False
        self.current_slot = 0
        self.config_number = 1
        self.retransmission = []
        self.wait_for_result_proof = {}

    def put(params):
        key, value = params
        self.running_state[key] = value

    def append(params):
        key, new_value = params
        if key in self.running_state:
            early_value = self.running_state[key]
            self.running_state[key] = early_value + new_value

    def get(key):
        if key in self.running_state:
            return self.running_state[key]
        return None

    def _slice(params):
        key, value = params
        if key in self.running_state:
            start, end = map(int, value.split(':'))
            early_value = self.running_state[key]
            self.running_state[key] = early_value[start: end]

    def run():
        put(('movie', 'star'))
        print(self.running_state)
        append(('movie', ' wars'))
        print(self.running_state)
        get('movie')
        print(self.running_state)
        _slice(('movie', '0:2'))
        print(self.running_state)
        await(False)

def main():
    config(clock='Lamport')

    replica1 = new(Replica, num=1)
    replica2 = new(Replica, num=1)


    unique_id_1 = uuid.uuid4()
    setup(replica1, (True, False, unique_id_1.hex, None, replica2))

    unique_id_2 = uuid.uuid4()
    setup(replica2, (True, True, unique_id_2.hex, replica1, None))


    start(replica1)
    start(replica2)
