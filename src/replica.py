# -*- generated by 1.0.9 -*-
import da
_config_object = {}
import uuid
REPLICA_PENDING = 'PENDING'
REPLICA_ACTIVE = 'ACTIVE'
REPLICA_IMMUTABLE = 'IMMUTABLE'

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, isHead, isTail, unique_id, prev_replica, next_replica, **rest_340):
        super().setup(isHead=isHead, isTail=isTail, unique_id=unique_id, prev_replica=prev_replica, next_replica=next_replica, **rest_340)
        self._state.isHead = isHead
        self._state.isTail = isTail
        self._state.unique_id = unique_id
        self._state.prev_replica = prev_replica
        self._state.next_replica = next_replica
        uuid = self._state.unique_id
        self._state.running_state = {}
        self._state.history = []
        self._state.mode = REPLICA_ACTIVE
        self._state.prev_replica = self._state.prev_replica
        self._state.next_replica = self._state.next_replica
        self._state.public_keys = {}
        self._state.private_key = None
        self._state.result_shuttle_cache = {}
        self._state.checkpoint_proof_cache = {}
        self._state.isHead = False
        self._state.isTail = False
        self._state.current_slot = 0
        self._state.config_number = 1
        self._state.retransmission = []
        self._state.wait_for_result_proof = {}
        print(self._id)

    def run(self):
        super()._label('_st_label_282', block=False)
        _st_label_282 = 0
        while (_st_label_282 == 0):
            _st_label_282 += 1
            if False:
                _st_label_282 += 1
            else:
                super()._label('_st_label_282', block=True)
                _st_label_282 -= 1

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'clock': 'Lamport'}

    def run(self):
        replica1 = self.new(Replica, num=1)
        replica2 = self.new(Replica, num=1)
        unique_id_1 = uuid.uuid4()
        self._setup(replica1, (True, False, unique_id_1.hex, None, replica2))
        unique_id_2 = uuid.uuid4()
        self._setup(replica2, (True, True, unique_id_2.hex, replica1, None))
        self._start(replica1)
        self._start(replica2)
